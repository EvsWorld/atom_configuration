(function() {
  module.exports = function(colorPicker) {
    return {
      element: null,
      pointer: null,
      activate: function() {
        var _isClicking, hasChild;
        this.element = {
          el: (function() {
            var _classPrefix, _el;
            _classPrefix = colorPicker.element.el.className;
            _el = document.createElement('div');
            _el.classList.add(_classPrefix + "-definition");
            return _el;
          })(),
          height: function() {
            return this.el.offsetHeight;
          },
          add: function(element) {
            this.el.appendChild(element);
            return this;
          },
          setColor: function(smartColor) {
            return this.el.style.backgroundColor = smartColor.toRGBA();
          }
        };
        colorPicker.element.add(this.element.el);
        setTimeout((function(_this) {
          return function() {
            var $colorPicker, Arrow;
            Arrow = colorPicker.getExtension('Arrow');
            $colorPicker = colorPicker.element;
            colorPicker.onInputVariable(function() {
              var _newHeight, _oldHeight, onClose;
              _oldHeight = $colorPicker.height();
              $colorPicker.addClass('view--definition');
              _newHeight = _this.element.height() + Arrow.element.height();
              $colorPicker.setHeight(_newHeight);
              _this.element.setColor(colorPicker.SmartColor.RGBAArray([0, 0, 0, 0]));
              onClose = function() {
                colorPicker.canOpen = true;
                $colorPicker.setHeight(_oldHeight);
                $colorPicker.removeClass('view--definition');
                return colorPicker.Emitter.off('close', onClose);
              };
              return colorPicker.onClose(onClose);
            });
            colorPicker.onInputColor(function() {
              return $colorPicker.removeClass('view--definition');
            });
          };
        })(this));
        colorPicker.onInputVariableColor((function(_this) {
          return function(smartColor) {
            if (!smartColor) {
              return;
            }
            return _this.element.setColor(smartColor);
          };
        })(this));
        colorPicker.onInputVariableColor((function(_this) {
          return function() {
            var pointer;
            pointer = arguments[arguments.length - 1];
            return _this.pointer = pointer;
          };
        })(this));
        hasChild = function(element, child) {
          var _parent;
          if (child && (_parent = child.parentNode)) {
            if (child === element) {
              return true;
            } else {
              return hasChild(element, _parent);
            }
          }
          return false;
        };
        _isClicking = false;
        colorPicker.onMouseDown((function(_this) {
          return function(e, isOnPicker) {
            if (!(isOnPicker && hasChild(_this.element.el, e.target))) {
              return;
            }
            e.preventDefault();
            return _isClicking = true;
          };
        })(this));
        colorPicker.onMouseMove(function(e) {
          return _isClicking = false;
        });
        colorPicker.onMouseUp((function(_this) {
          return function(e) {
            if (!(_isClicking && _this.pointer)) {
              return;
            }
            atom.workspace.open(_this.pointer.filePath).then(function() {
              var Editor;
              Editor = atom.workspace.getActiveTextEditor();
              Editor.clearSelections();
              Editor.setSelectedBufferRange(_this.pointer.range);
              Editor.scrollToCursorPosition();
              return colorPicker.close();
            });
          };
        })(this));
        setTimeout((function(_this) {
          return function() {
            var _definition;
            _definition = document.createElement('p');
            _definition.classList.add(_this.element.el.className + "-definition");
            colorPicker.onInputVariable(function() {
              return _definition.innerText = '';
            });
            colorPicker.onInputVariableColor(function(color) {
              if (color) {
                return _definition.innerText = color.value;
              } else {
                return _definition.innerText = 'No color found.';
              }
            });
            return _this.element.add(_definition);
          };
        })(this));
        setTimeout((function(_this) {
          return function() {
            var _variable;
            _variable = document.createElement('p');
            _variable.classList.add(_this.element.el.className + "-variable");
            colorPicker.onInputVariable(function(match) {
              return _variable.innerText = match.match;
            });
            return _this.element.add(_variable);
          };
        })(this));
        return this;
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2V2YW5oZW5kcml4MS8uYXRvbS9wYWNrYWdlcy9jb2xvci1waWNrZXIvbGliL2V4dGVuc2lvbnMvRGVmaW5pdGlvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0k7RUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLFdBQUQ7V0FDYjtNQUFBLE9BQUEsRUFBUyxJQUFUO01BQ0EsT0FBQSxFQUFTLElBRFQ7TUFNQSxRQUFBLEVBQVUsU0FBQTtBQUNOLFlBQUE7UUFBQSxJQUFDLENBQUEsT0FBRCxHQUNJO1VBQUEsRUFBQSxFQUFPLENBQUEsU0FBQTtBQUNILGdCQUFBO1lBQUEsWUFBQSxHQUFlLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ3RDLEdBQUEsR0FBTSxRQUFRLENBQUMsYUFBVCxDQUF1QixLQUF2QjtZQUNOLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBZCxDQUFzQixZQUFGLEdBQWdCLGFBQXBDO0FBRUEsbUJBQU87VUFMSixDQUFBLENBQUgsQ0FBQSxDQUFKO1VBT0EsTUFBQSxFQUFRLFNBQUE7bUJBQUcsSUFBQyxDQUFBLEVBQUUsQ0FBQztVQUFQLENBUFI7VUFVQSxHQUFBLEVBQUssU0FBQyxPQUFEO1lBQ0QsSUFBQyxDQUFBLEVBQUUsQ0FBQyxXQUFKLENBQWdCLE9BQWhCO0FBQ0EsbUJBQU87VUFGTixDQVZMO1VBZUEsUUFBQSxFQUFVLFNBQUMsVUFBRDttQkFDTixJQUFDLENBQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFWLEdBQTRCLFVBQVUsQ0FBQyxNQUFYLENBQUE7VUFEdEIsQ0FmVjs7UUFpQkosV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFwQixDQUF3QixJQUFDLENBQUEsT0FBTyxDQUFDLEVBQWpDO1FBSUEsVUFBQSxDQUFXLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7QUFDUCxnQkFBQTtZQUFBLEtBQUEsR0FBUSxXQUFXLENBQUMs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V0FBVyxDQUFDLGVBQVosQ0FBNEIsU0FBQyxLQUFEO3FCQUN4QixTQUFTLENBQUMsU0FBVixHQUFzQixLQUFLLENBQUM7WUFESixDQUE1QjttQkFJQSxLQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsQ0FBYSxTQUFiO1VBVk87UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVg7QUFXQSxlQUFPO01BbElELENBTlY7O0VBRGE7QUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgIENvbG9yIFBpY2tlci9leHRlbnNpb25zOiBEZWZpbml0aW9uXG4jICBUaGUgZWxlbWVudCBzaG93aW5nIHRoZSBjdXJyZW50IHZhcmlhYmxlIGRlZmluaXRpb25cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSAoY29sb3JQaWNrZXIpIC0+XG4gICAgICAgIGVsZW1lbnQ6IG51bGxcbiAgICAgICAgcG9pbnRlcjogbnVsbFxuXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIyAgQ3JlYXRlIGFuZCBhY3RpdmF0ZSBEZWZpbml0aW9uIGVsZW1lbnRcbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgYWN0aXZhdGU6IC0+XG4gICAgICAgICAgICBAZWxlbWVudCA9XG4gICAgICAgICAgICAgICAgZWw6IGRvIC0+XG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc1ByZWZpeCA9IGNvbG9yUGlja2VyLmVsZW1lbnQuZWwuY2xhc3NOYW1lXG4gICAgICAgICAgICAgICAgICAgIF9lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcbiAgICAgICAgICAgICAgICAgICAgX2VsLmNsYXNzTGlzdC5hZGQgXCIjeyBfY2xhc3NQcmVmaXggfS1kZWZpbml0aW9uXCJcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2VsXG4gICAgICAgICAgICAgICAgIyBVdGlsaXR5IGZ1bmN0aW9uc1xuICAgICAgICAgICAgICAgIGhlaWdodDogLT4gQGVsLm9mZnNldEhlaWdodFxuXG4gICAgICAgICAgICAgICAgIyBBZGQgYSBjaGlsZCBvbiB0aGUgRGVmaW5pdGlvbiBlbGVtZW50XG4gICAgICAgICAgICAgICAgYWRkOiAoZWxlbWVudCkgLT5cbiAgICAgICAgICAgICAgICAgICAgQGVsLmFwcGVuZENoaWxkIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcblxuICAgICAgICAgICAgICAgICMgU2V0IHRoZSBEZWZpbml0aW9uIGVsZW1lbnQgYmFja2dyb3VuZCBjb2xvclxuICAgICAgICAgICAgICAgIHNldENvbG9yOiAoc21hcnRDb2xvcikgLT5cbiAgICAgICAgICAgICAgICAgICAgQGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHNtYXJ0Q29sb3IudG9SR0JBKClcbiAgICAgICAgICAgIGNvbG9yUGlja2VyLmVsZW1lbnQuYWRkIEBlbGVtZW50LmVsXG5cbiAgICAgICAgIyAgU2V0IENvbG9yIFBpY2tlciBoZWlnaHRcbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIHNldFRpbWVvdXQgPT5cbiAgICAgICAgICAgICAgICBBcnJvdyA9IGNvbG9yUGlja2VyLmdldEV4dGVuc2lvbiAnQXJyb3cnXG4gICAgICAgICAgICAgICAgJGNvbG9yUGlja2VyID0gY29sb3JQaWNrZXIuZWxlbWVudFxuXG4gICAgICAgICAgICAgICAgIyBDaGFuZ2UgdmlldyBtb2RlIHdoZW4gYSB2YXJpYWJsZSBpcyBpbnB1dFxuICAgICAgICAgICAgICAgIGNvbG9yUGlja2VyLm9uSW5wdXRWYXJpYWJsZSA9PlxuICAgICAgICAgICAgICAgICAgICBfb2xkSGVpZ2h0ID0gJGNvbG9yUGlja2VyLmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICRjb2xvclBpY2tlci5hZGRDbGFzcyAndmlldy0tZGVmaW5pdGlvbidcblxuICAgICAgICAgICAgICAgICAgICBfbmV3SGVpZ2h0ID0gQGVsZW1lbnQuaGVpZ2h0KCkgKyBBcnJvdy5lbGVtZW50LmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICRjb2xvclBpY2tlci5zZXRIZWlnaHQgX25ld0hlaWdodFxuXG4gICAgICAgICAgICAgICAgICAgICMgUmVzZXQgY3VycmVudCBlbGVtZW50IGJhY2tncm91bmQgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgQGVsZW1lbnQuc2V0Q29sb3IgY29sb3JQaWNrZXIuU21hcnRDb2xvci5SR0JBQXJyYXkgWzAsIDAsIDAsIDBdXG5cbiAgICAgICAgICAgICAgICAgICAgIyBSZXNldCBwaWNrZXIgb24gY2xvc2UsIGFuZCBjbGVhciB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgIyBUT0RPIGhhbmRsZSB0aGlzIG9uIHRoZSBDb2xvclBpY2tlciBpdHNlbGYsIG1heWJlP1xuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlID0gLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yUGlja2VyLmNhbk9wZW4gPSB5ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvclBpY2tlci5zZXRIZWlnaHQgX29sZEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG9yUGlja2VyLnJlbW92ZUNsYXNzICd2aWV3LS1kZWZpbml0aW9uJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAjIFRPRE86IFRoaXMga2luZGEgZ29lcyBhZ2FpbnN0IHRoZSAnbm8gc3RyaW5ncycgdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yUGlja2VyLkVtaXR0ZXIub2ZmICdjbG9zZScsIG9uQ2xvc2VcbiAgICAgICAgICAgICAgICAgICAgY29sb3JQaWNrZXIub25DbG9zZSBvbkNsb3NlXG5cbiAgICAgICAgICAgICAgICAjIE1ha2Ugc3VyZSB0aGUgY2xhc3MgaXMgbmV2ZXIgc2V0IHdoZW4gYSBjb2xvciBpcyBpbnB1dFxuICAgICAgICAgICAgICAgIGNvbG9yUGlja2VyLm9uSW5wdXRDb2xvciAtPlxuICAgICAgICAgICAgICAgICAgICAkY29sb3JQaWNrZXIucmVtb3ZlQ2xhc3MgJ3ZpZXctLWRlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgIyAgU2V0IGJhY2tncm91bmQgZWxlbWVudCBjb2xvciBvbiBjaGFuZ2VcbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGNvbG9yUGlja2VyLm9uSW5wdXRWYXJpYWJsZUNvbG9yIChzbWFydENvbG9yKSA9PlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmxlc3Mgc21hcnRDb2xvclxuICAgICAgICAgICAgICAgIEBlbGVtZW50LnNldENvbG9yIHNtYXJ0Q29sb3JcblxuICAgICAgICAjICBTZXQgb3IgcmVwbGFjZSBzZWxlY3Rpb24gb24gY2xpY2tcbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGNvbG9yUGlja2VyLm9uSW5wdXRWYXJpYWJsZUNvbG9yICguLi4sIHBvaW50ZXIpID0+XG4gICAgICAgICAgICAgICAgIyBLZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IHBvaW50ZXIgZm9yIHdoZW4gdGhlIGNvbG9yIGlzXG4gICAgICAgICAgICAgICAgIyBzdXBwb3NlZCB0byBiZSByZXBsYWNlZFxuICAgICAgICAgICAgICAgIEBwb2ludGVyID0gcG9pbnRlclxuXG4gICAgICAgICAgICBoYXNDaGlsZCA9IChlbGVtZW50LCBjaGlsZCkgLT5cbiAgICAgICAgICAgICAgICBpZiBjaGlsZCBhbmQgX3BhcmVudCA9IGNoaWxkLnBhcmVudE5vZGVcbiAgICAgICAgICAgICAgICAgICAgaWYgY2hpbGQgaXMgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gaGFzQ2hpbGQgZWxlbWVudCwgX3BhcmVudFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICAgICAgICBfaXNDbGlja2luZyA9IG5vXG5cbiAgICAgICAgICAgIGNvbG9yUGlja2VyLm9uTW91c2VEb3duIChlLCBpc09uUGlja2VyKSA9PlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmxlc3MgaXNPblBpY2tlciBhbmQgaGFzQ2hpbGQgQGVsZW1lbnQuZWwsIGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgX2lzQ2xpY2tpbmcgPSB5ZXNcblxuICAgICAgICAgICAgY29sb3JQaWNrZXIub25Nb3VzZU1vdmUgKGUpIC0+XG4gICAgICAgICAgICAgICAgX2lzQ2xpY2tpbmcgPSBub1xuXG4gICAgICAgICAgICBjb2xvclBpY2tlci5vbk1vdXNlVXAgKGUpID0+XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBfaXNDbGlja2luZyBhbmQgQHBvaW50ZXJcblxuICAgICAgICAgICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oQHBvaW50ZXIuZmlsZVBhdGgpLnRoZW4gPT5cbiAgICAgICAgICAgICAgICAgICAgRWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXG4gICAgICAgICAgICAgICAgICAgIEVkaXRvci5jbGVhclNlbGVjdGlvbnMoKVxuICAgICAgICAgICAgICAgICAgICBFZGl0b3Iuc2V0U2VsZWN0ZWRCdWZmZXJSYW5nZSBAcG9pbnRlci5yYW5nZVxuICAgICAgICAgICAgICAgICAgICBFZGl0b3Iuc2Nyb2xsVG9DdXJzb3JQb3NpdGlvbigpXG5cbiAgICAgICAgICAgICAgICAgICAgY29sb3JQaWNrZXIuY2xvc2UoKVxuICAgICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgICMgIENyZWF0ZSBEZWZpbml0aW9uIGRlZmluaXRpb24gdGV4dCBlbGVtZW50XG4gICAgICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBzZXRUaW1lb3V0ID0+XG4gICAgICAgICAgICAgICAgIyBDcmVhdGUgZGVmaW5pdGlvbiB0ZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBfZGVmaW5pdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3AnXG4gICAgICAgICAgICAgICAgX2RlZmluaXRpb24uY2xhc3NMaXN0LmFkZCBcIiN7IEBlbGVtZW50LmVsLmNsYXNzTmFtZSB9LWRlZmluaXRpb25cIlxuXG4gICAgICAgICAgICAgICAgIyBSZW1vdmUgdGhlIGRlZmluaXRpb24gd2hlbiBhIG5ldyB2YXJpYWJsZSBpcyBpbnB1dFxuICAgICAgICAgICAgICAgIGNvbG9yUGlja2VyLm9uSW5wdXRWYXJpYWJsZSAtPlxuICAgICAgICAgICAgICAgICAgICBfZGVmaW5pdGlvbi5pbm5lclRleHQgPSAnJ1xuXG4gICAgICAgICAgICAgICAgIyBTZXQgZGVmaW5pdGlvbiB3aGVuIHRoZSBkZWZpbml0aW9uIGlzIGZvdW5kXG4gICAgICAgICAgICAgICAgY29sb3JQaWNrZXIub25JbnB1dFZhcmlhYmxlQ29sb3IgKGNvbG9yKSAtPlxuICAgICAgICAgICAgICAgICAgICAjIElmIGEgY29sb3IgZGVmaW5pdGlvbiBpcyBmb3VuZFxuICAgICAgICAgICAgICAgICAgICBpZiBjb2xvciB0aGVuIF9kZWZpbml0aW9uLmlubmVyVGV4dCA9IGNvbG9yLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICMgSWYgbm8gZGVmaW5pdGlvbiBpcyBmb3VuZCwgc2hvdyBhbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICBlbHNlIF9kZWZpbml0aW9uLmlubmVyVGV4dCA9ICdObyBjb2xvciBmb3VuZC4nXG5cbiAgICAgICAgICAgICAgICAjIEFkZCB0byBEZWZpbml0aW9uIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBAZWxlbWVudC5hZGQgX2RlZmluaXRpb25cblxuICAgICAgICAjICBDcmVhdGUgRGVmaW5pdGlvbiB2YXJpYWJsZSB0ZXh0IGVsZW1lbnRcbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIHNldFRpbWVvdXQgPT5cbiAgICAgICAgICAgICAgICAjIENyZWF0ZSB2YXJpYWJsZSB0ZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBfdmFyaWFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdwJ1xuICAgICAgICAgICAgICAgIF92YXJpYWJsZS5jbGFzc0xpc3QuYWRkIFwiI3sgQGVsZW1lbnQuZWwuY2xhc3NOYW1lIH0tdmFyaWFibGVcIlxuXG4gICAgICAgICAgICAgICAgIyBTZXQgdmFyaWFibGUgd2hlbiB0aGUgdmFyaWFibGUgaXMgaW5wdXRcbiAgICAgICAgICAgICAgICBjb2xvclBpY2tlci5vbklucHV0VmFyaWFibGUgKG1hdGNoKSAtPlxuICAgICAgICAgICAgICAgICAgICBfdmFyaWFibGUuaW5uZXJUZXh0ID0gbWF0Y2gubWF0Y2hcblxuICAgICAgICAgICAgICAgICMgQWRkIHRvIERlZmluaXRpb24gZWxlbWVudFxuICAgICAgICAgICAgICAgIEBlbGVtZW50LmFkZCBfdmFyaWFibGVcbiAgICAgICAgICAgIHJldHVybiB0aGlzXG4iXX0=
