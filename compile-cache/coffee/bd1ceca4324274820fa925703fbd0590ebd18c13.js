(function() {
  var ArgumentParser, fs, path;

  path = require('path');

  fs = require('fs');

  module.exports = ArgumentParser = (function() {
    function ArgumentParser() {}

    ArgumentParser.prototype.parseValue = function(value) {
      if (value === void 0) {
        return true;
      }
      value = value.trim();
      if (value === true || value === 'true' || value === 'yes') {
        return true;
      }
      if (value === false || value === 'false' || value === 'no') {
        return false;
      }
      if (isFinite(value)) {
        if (value.indexOf('.') > -1) {
          return parseFloat(value);
        } else {
          return parseInt(value);
        }
      }
      if (value[0] === '[') {
        value = this.parseArray(value);
      }
      if (value[0] === '{') {
        value = this.parseObject(value);
      }
      return value;
    };

    ArgumentParser.prototype.parseArray = function(arrayAsString) {
      var arr, match, regex, value;
      arrayAsString = arrayAsString.substr(1, arrayAsString.length - 2);
      regex = /(?:\s*(?:(?:'(.*?)')|(?:"(.*?)")|([^,;]+))?)*/g;
      arr = [];
      while ((match = regex.exec(arrayAsString)) !== null) {
        if (match.index === regex.lastIndex) {
          regex.lastIndex++;
        }
        value = match[1] ? match[1] : match[2] ? match[2] : match[3] ? match[3] : void 0;
        if (value !== void 0) {
          value = this.parseValue(value);
          arr.push(value);
        }
      }
      return arr;
    };

    ArgumentParser.prototype.parseObject = function(objectAsString) {
      var key, match, obj, regex, value;
      objectAsString = objectAsString.substr(1, objectAsString.length - 2);
      regex = /(?:(\!?[\w-\.]+)(?:\s*:\s*(?:(?:'(.*?)')|(?:"(.*?)")|([^,;]+)))?)*/g;
      obj = {};
      while ((match = regex.exec(objectAsString)) !== null) {
        if (match.index === regex.lastIndex) {
          regex.lastIndex++;
        }
        if (match[1] !== void 0) {
          key = match[1].trim();
          value = match[2] ? match[2] : match[3] ? match[3] : match[4] ? match[4] : void 0;
          if (key[0] === '!') {
            key = key.substr(1);
            if (value === void 0) {
              value = 'false';
            }
          }
          obj[key] = this.parseValue(value);
        }
      }
      return obj;
    };

    return ArgumentParser;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2V2YW5oZW5kcml4MS8uYXRvbS9wYWNrYWdlcy9zYXNzLWF1dG9jb21waWxlL2xpYi9oZWxwZXIvYXJndW1lbnQtcGFyc2VyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSOztFQUNQLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjs7RUFHTCxNQUFNLENBQUMsT0FBUCxHQUNNOzs7NkJBRUYsVUFBQSxHQUFZLFNBQUMsS0FBRDtNQUVSLElBQUcsS0FBQSxLQUFTLE1BQVo7QUFDSSxlQUFPLEtBRFg7O01BR0EsS0FBQSxHQUFRLEtBQUssQ0FBQyxJQUFOLENBQUE7TUFHUixJQUFHLEtBQUEsS0FBVSxJQUFWLElBQUEsS0FBQSxLQUFnQixNQUFoQixJQUFBLEtBQUEsS0FBd0IsS0FBM0I7QUFDSSxlQUFPLEtBRFg7O01BRUEsSUFBRyxLQUFBLEtBQVUsS0FBVixJQUFBLEtBQUEsS0FBaUIsT0FBakIsSUFBQSxLQUFBLEtBQTBCLElBQTdCO0FBQ0ksZUFBTyxNQURYOztNQUlBLElBQUcsUUFBQSxDQUFTLEtBQVQsQ0FBSDtRQUNJLElBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFkLENBQUEsR0FBcUIsQ0FBQyxDQUF6QjtBQUNJLGlCQUFPLFVBQUEsQ0FBVyxLQUFYLEVBRFg7U0FBQSxNQUFBO0FBR0ksaUJBQU8sUUFBQSxDQUFTLEtBQVQsRUFIWDtTQURKOztNQU9BLElBQUcsS0FBTSxDQUFBLENBQUEsQ0FBTixLQUFZLEdBQWY7UUFDSSxLQUFBLEdBQVEsSUFBQyxDQUFBLFVBQUQsQ0FBWSxLQUFaLEVBRFo7O01BSUEsSUFBRyxLQUFNLENBQUEsQ0FBQSxDQUFOLEtBQVksR0FBZjtRQUNJLEtBQUEsR0FBUSxJQUFDLENBQUEsV0FBRCxDQUFhLEtBQWIsRUFEWjs7QUFHQSxhQUFPO0lBNUJDOzs2QkErQlosVUFBQSxHQUFZLFNBQUMsYUFBRDtBQUNSLFVBQUE7TUFBQSxhQUFBLEdBQWdCLGFBQWEsQ0FBQyxNQUFkLENBQXFCLENBQXJCLEVBQXdCLGFBQWEsQ0FBQyxNQUFkLEdBQXVCLENBQS9DO01BQ2hCLEtBQUEsR0FBUTtNQUNSLEdBQUEsR0FBTTtBQUNOLGFBQU0sQ0FBQyxLQUFBLEdBQVEsS0FBSyxDQUFDLElBQU4sQ0FBVyxhQUFYLENBQVQsQ0FBQSxLQUF5QyxJQUEvQztRQUNJLElBQUcsS0FBSyxDQUFDLEtBQU4sS0FBZSxLQUFLLENBQUMsU0FBeEI7VUFDSSxLQUFLLENBQUMsU0FBTixHQURKOztRQUdBLEtBQUEsR0FBVyxLQUFNLENBQUEsQ0FBQSxDQUFULEdBQWlCLEtBQU0sQ0FBQSxDQUFBLENBQXZCLEdBQWtDLEtBQU0sQ0FBQSxDQUFBLENBQVQsR0FBaUIsS0FBTSxDQUFBLENBQUEsQ0FBdkIsR0FBa0MsS0FBTSxDQUFBLENBQUEsQ0FBVCxHQUFpQixLQUFNLENBQUEsQ0FBQSxDQUF2QixHQUErQjtRQUNyRyxJQUFHLEtBQUEsS0FBVyxNQUFkO1VBQ0ksS0FBQSxHQUFRLElBQUMsQ0FBQSxVQUFELENBQVksS0FBWjtVQUNSLEdBQUcsQ0FBQyxJQUFKLENBQVMsS0FBVCxFQUZKOztNQUxKO0FBU0EsYUFBTztJQWJDOzs2QkFnQlosV0FBQSxHQUFhLFNBQUMsY0FBRDtBQUNULFVBQUE7TUFBQSxjQUFBLEdBQWlCLGNBQWMsQ0FBQyxNQUFmLENBQXNCLENBQXRCLEVBQXlCLGNBQWMsQ0FBQyxNQUFmLEdBQXdCLENBQWpEO01BQ2pCLEtBQUEsR0FBUTtNQUNSLEdBQUEsR0FBTTtBQUNOLGFBQU0sQ0FBQyxLQUFBLEdBQVEsS0FBSyxDQUFDLElBQU4sQ0FBVyxjQUFYLENBQVQsQ0FBQSxLQUEwQyxJQUFoRDtRQUNJLElBQUcsS0FBSyxDQUFDLEtBQU4sS0FBZSxLQUFLLENBQUMsU0FBeEI7VUFDSSxLQUFLLENBQUMsU0FBTixHQURKOztRQUdBLElBQUcsS0FBTSxDQUFBLENBQUEsQ0FBTixLQUFZLE1BQWY7VUFDSSxHQUFBLEdBQU0sS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLElBQVQsQ0FBQTtVQUNOLEtBQUEsR0FBVyxLQUFNLENBQUEsQ0FBQSxDQUFULEdBQWlCLEtBQU0sQ0FBQSxDQUFBLENBQXZCLEdBQWtDLEtBQU0sQ0FBQSxDQUFBLENBQVQsR0FBaUIsS0FBTSxDQUFBLENBQUEsQ0FBdkIsR0FBa0MsS0FBTSxDQUFBLENBQUEsQ0FBVCxHQUFpQixLQUFNLENBQUEsQ0FBQSxDQUF2QixHQUFBO1VBQ3RFLElBQUcsR0FBSSxDQUFBLENBQUEsQ0FBSixLQUFVLEdBQWI7WUFDSSxHQUFBLEdBQU0sR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFYO1lBQ04sSUFBRyxLQUFBLEtBQVMsTUFBWjtjQUNJLEtBQUEsR0FBUSxRQURaO2FBRko7O1VBSUEsR0FBSSxDQUFBLEdBQUEsQ0FBSixHQUFXLElBQUMsQ0FBQSxVQUFELENBQVksS0FBWixFQVBmOztNQUpKO0FBYUEsYUFBTztJQWpCRTs7Ozs7QUF0RGpCIiwic291cmNlc0NvbnRlbnQiOlsicGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuZnMgPSByZXF1aXJlKCdmcycpXG5cblxubW9kdWxlLmV4cG9ydHMgPVxuY2xhc3MgQXJndW1lbnRQYXJzZXJcblxuICAgIHBhcnNlVmFsdWU6ICh2YWx1ZSkgLT5cbiAgICAgICAgIyB1bmRlZmluZWQgaXMgYSBzcGVjaWFsIHZhbHVlIHRoYXQgbWVhbnMsIHRoYXQgdGhlIGtleSBpcyBkZWZpbmVkLCBidXQgbm8gdmFsdWVcbiAgICAgICAgaWYgdmFsdWUgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpXG5cbiAgICAgICAgIyBCb29sZWFuXG4gICAgICAgIGlmIHZhbHVlIGluIFt0cnVlLCAndHJ1ZScsICd5ZXMnXVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgaWYgdmFsdWUgaW4gW2ZhbHNlLCAnZmFsc2UnLCAnbm8nXVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgIyBOdW1iZXJcbiAgICAgICAgaWYgaXNGaW5pdGUodmFsdWUpXG4gICAgICAgICAgICBpZiB2YWx1ZS5pbmRleE9mKCcuJykgPiAtMVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSlcblxuICAgICAgICAjIEFycmF5XG4gICAgICAgIGlmIHZhbHVlWzBdIGlzICdbJ1xuICAgICAgICAgICAgdmFsdWUgPSBAcGFyc2VBcnJheSh2YWx1ZSlcblxuICAgICAgICAjIE9iamVjdFxuICAgICAgICBpZiB2YWx1ZVswXSBpcyAneydcbiAgICAgICAgICAgIHZhbHVlID0gQHBhcnNlT2JqZWN0KHZhbHVlKVxuXG4gICAgICAgIHJldHVybiB2YWx1ZVxuXG5cbiAgICBwYXJzZUFycmF5OiAoYXJyYXlBc1N0cmluZykgLT5cbiAgICAgICAgYXJyYXlBc1N0cmluZyA9IGFycmF5QXNTdHJpbmcuc3Vic3RyKDEsIGFycmF5QXNTdHJpbmcubGVuZ3RoIC0gMilcbiAgICAgICAgcmVnZXggPSAvKD86XFxzKig/Oig/OicoLio/KScpfCg/OlwiKC4qPylcIil8KFteLDtdKykpPykqL2dcbiAgICAgICAgYXJyID0gW11cbiAgICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXguZXhlYyhhcnJheUFzU3RyaW5nKSkgaXNudCBudWxsXG4gICAgICAgICAgICBpZiBtYXRjaC5pbmRleCA9PSByZWdleC5sYXN0SW5kZXhcbiAgICAgICAgICAgICAgICByZWdleC5sYXN0SW5kZXgrK1xuXG4gICAgICAgICAgICB2YWx1ZSA9IGlmIG1hdGNoWzFdIHRoZW4gbWF0Y2hbMV0gZWxzZSBpZiBtYXRjaFsyXSB0aGVuIG1hdGNoWzJdIGVsc2UgaWYgbWF0Y2hbM10gdGhlbiBtYXRjaFszXSBlbHNlIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgdmFsdWUgaXNudCB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IEBwYXJzZVZhbHVlKHZhbHVlKVxuICAgICAgICAgICAgICAgIGFyci5wdXNoKHZhbHVlKVxuXG4gICAgICAgIHJldHVybiBhcnJcblxuXG4gICAgcGFyc2VPYmplY3Q6IChvYmplY3RBc1N0cmluZykgLT5cbiAgICAgICAgb2JqZWN0QXNTdHJpbmcgPSBvYmplY3RBc1N0cmluZy5zdWJzdHIoMSwgb2JqZWN0QXNTdHJpbmcubGVuZ3RoIC0gMilcbiAgICAgICAgcmVnZXggPSAvKD86KFxcIT9bXFx3LVxcLl0rKSg/Olxccyo6XFxzKig/Oig/OicoLio/KScpfCg/OlwiKC4qPylcIil8KFteLDtdKykpKT8pKi9nXG4gICAgICAgIG9iaiA9IHt9XG4gICAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4LmV4ZWMob2JqZWN0QXNTdHJpbmcpKSBpc250IG51bGxcbiAgICAgICAgICAgIGlmIG1hdGNoLmluZGV4ID09IHJlZ2V4Lmxhc3RJbmRleFxuICAgICAgICAgICAgICAgIHJlZ2V4Lmxhc3RJbmRleCsrXG5cbiAgICAgICAgICAgIGlmIG1hdGNoWzFdICE9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIGtleSA9IG1hdGNoWzFdLnRyaW0oKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gaWYgbWF0Y2hbMl0gdGhlbiBtYXRjaFsyXSBlbHNlIGlmIG1hdGNoWzNdIHRoZW4gbWF0Y2hbM10gZWxzZSBpZiBtYXRjaFs0XSB0aGVuIG1hdGNoWzRdXG4gICAgICAgICAgICAgICAgaWYga2V5WzBdIGlzICchJ1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXkuc3Vic3RyKDEpXG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnZmFsc2UnXG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPSBAcGFyc2VWYWx1ZSh2YWx1ZSlcblxuICAgICAgICByZXR1cm4gb2JqXG4iXX0=
