(function() {
  var wrapSelection;

  module.exports = {
    activate: function(state) {
      return atom.commands.add('atom-workspace', {
        'wrap-in-tag:wrap': (function(_this) {
          return function() {
            return _this.wrap();
          };
        })(this)
      });
    },
    wrap: function() {
      var editor;
      if (editor = atom.workspace.getActiveTextEditor()) {
        return editor.getSelections().map(function(item) {
          return wrapSelection(editor, item);
        });
      }
    }
  };

  wrapSelection = function(editor, selection) {
    var editorView, endTagSelection, newEndTagSelectRange, newStartTagSelectRange, newText, range, tag, tagRangePos, text;
    tag = 'p';
    text = selection.getText();
    tagRangePos = selection.getBufferRange();
    newText = ['<', tag, '>', text, '</', tag, '>'].join('');
    range = {
      start: {
        from: [tagRangePos.start.row, tagRangePos.start.column + 1],
        to: [tagRangePos.start.row, tagRangePos.start.column + 2]
      },
      end: {
        from: [tagRangePos.end.row, tagRangePos.end.column + 5],
        to: [tagRangePos.end.row, tagRangePos.end.column + 6]
      }
    };
    if (range.end.from[0] > range.start.from[0]) {
      range.end.from[1] = range.end.from[1] - 3;
      range.end.to[1] = range.end.to[1] - 3;
    }
    newStartTagSelectRange = [range.start.from, range.start.to];
    newEndTagSelectRange = [range.end.from, range.end.to];
    selection.insertText(newText);
    selection.cursor.setBufferPosition([tagRangePos.start.row, tagRangePos.start.column + 1]);
    editor.addSelectionForBufferRange(newStartTagSelectRange);
    endTagSelection = editor.addSelectionForBufferRange(newEndTagSelectRange);
    editorView = atom.views.getView(editor);
    return editorView.addEventListener('keydown', function(event) {
      if (event.keyCode === 32) {
        endTagSelection.cursor.marker.destroy();
        return this.removeEventListener('keydown', arguments.callee);
      }
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2V2YW5oZW5kcml4MS8uYXRvbS9wYWNrYWdlcy9hdG9tLXdyYXAtaW4tdGFnL2xpYi93cmFwLWluLXRhZy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQU0sQ0FBQyxPQUFQLEdBRUU7SUFBQSxRQUFBLEVBQVUsU0FBQyxLQUFEO2FBRVIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFkLENBQWtCLGdCQUFsQixFQUFvQztRQUFBLGtCQUFBLEVBQW9CLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQUcsS0FBQyxDQUFBLElBQUQsQ0FBQTtVQUFIO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtPQUFwQztJQUZRLENBQVY7SUFJQSxJQUFBLEVBQU0sU0FBQTtBQUNKLFVBQUE7TUFBQSxJQUFHLE1BQUEsR0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFmLENBQUEsQ0FBWjtlQUNFLE1BQU0sQ0FBQyxhQUFQLENBQUEsQ0FBc0IsQ0FBQyxHQUF2QixDQUEyQixTQUFDLElBQUQ7aUJBQVUsYUFBQSxDQUFjLE1BQWQsRUFBc0IsSUFBdEI7UUFBVixDQUEzQixFQURGOztJQURJLENBSk47OztFQVFGLGFBQUEsR0FBZ0IsU0FBQyxNQUFELEVBQVMsU0FBVDtBQUNkLFFBQUE7SUFBQSxHQUFBLEdBQU07SUFDTixJQUFBLEdBQU8sU0FBUyxDQUFDLE9BQVYsQ0FBQTtJQUNQLFdBQUEsR0FBYyxTQUFTLENBQUMsY0FBVixDQUFBO0lBRWQsT0FBQSxHQUFVLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLElBQWhCLEVBQXNCLElBQXRCLEVBQTRCLEdBQTVCLEVBQWlDLEdBQWpDLENBQXFDLENBQUMsSUFBdEMsQ0FBMkMsRUFBM0M7SUFFVixLQUFBLEdBQ0U7TUFBQSxLQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQW5CLEVBQXdCLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBbEIsR0FBeUIsQ0FBakQsQ0FBTjtRQUNBLEVBQUEsRUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBbkIsRUFBd0IsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFsQixHQUF5QixDQUFqRCxDQURKO09BREY7TUFHQSxHQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQWpCLEVBQXNCLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBaEIsR0FBdUIsQ0FBN0MsQ0FBTjtRQUNBLEVBQUEsRUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBakIsRUFBc0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFoQixHQUF1QixDQUE3QyxDQURKO09BSkY7O0lBT0YsSUFBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQWYsR0FBb0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUF4QztNQUNFLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBZixHQUFvQixLQUFLLENBQUMsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQWYsR0FBb0I7TUFDeEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFHLENBQUEsQ0FBQSxDQUFiLEdBQWtCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFBLENBQUEsQ0FBYixHQUFrQixFQUZ0Qzs7SUFJQSxzQkFBQSxHQUF5QixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBYixFQUFtQixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQS9CO0lBQ3pCLG9CQUFBLEdBQXVCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFYLEVBQWlCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBM0I7SUFFdkIsU0FBUyxDQUFDLFVBQVYsQ0FBcUIsT0FBckI7SUFDQSxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFqQixDQUFtQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBbkIsRUFBd0IsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFsQixHQUF5QixDQUFqRCxDQUFuQztJQUNBLE1BQU0sQ0FBQywwQkFBUCxDQUFrQyxzQkFBbEM7SUFDQSxlQUFBLEdBQWtCLE1BQU0sQ0FBQywwQkFBUCxDQUFrQyxvQkFBbEM7SUFFbEIsVUFBQSxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBWCxDQUFtQixNQUFuQjtXQUNiLFVBQVUsQ0FBQyxnQkFBWCxDQUE0QixTQUE1QixFQUF1QyxTQUFDLEtBQUQ7TUFDckMsSUFBRyxLQUFLLENBQUMsT0FBTixLQUFpQixFQUFwQjtRQUNFLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQTlCLENBQUE7ZUFDQSxJQUFDLENBQUEsbUJBQUQsQ0FBcUIsU0FBckIsRUFBZ0MsU0FBUyxDQUFDLE1BQTFDLEVBRkY7O0lBRHFDLENBQXZDO0VBNUJjO0FBVmhCIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPVxuXG4gIGFjdGl2YXRlOiAoc3RhdGUpIC0+XG5cbiAgICBhdG9tLmNvbW1hbmRzLmFkZCAnYXRvbS13b3Jrc3BhY2UnLCAnd3JhcC1pbi10YWc6d3JhcCc6ID0+IEB3cmFwKClcblxuICB3cmFwOiAtPlxuICAgIGlmIGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKVxuICAgICAgZWRpdG9yLmdldFNlbGVjdGlvbnMoKS5tYXAoKGl0ZW0pIC0+IHdyYXBTZWxlY3Rpb24oZWRpdG9yLCBpdGVtKSlcblxud3JhcFNlbGVjdGlvbiA9IChlZGl0b3IsIHNlbGVjdGlvbikgLT5cbiAgdGFnID0gJ3AnXG4gIHRleHQgPSBzZWxlY3Rpb24uZ2V0VGV4dCgpXG4gIHRhZ1JhbmdlUG9zID0gc2VsZWN0aW9uLmdldEJ1ZmZlclJhbmdlKClcblxuICBuZXdUZXh0ID0gWyc8JywgdGFnLCAnPicsIHRleHQsICc8LycsIHRhZywgJz4nXS5qb2luKCcnKVxuXG4gIHJhbmdlID1cbiAgICBzdGFydDpcbiAgICAgIGZyb206IFt0YWdSYW5nZVBvcy5zdGFydC5yb3csIHRhZ1JhbmdlUG9zLnN0YXJ0LmNvbHVtbisxXVxuICAgICAgdG86IFt0YWdSYW5nZVBvcy5zdGFydC5yb3csIHRhZ1JhbmdlUG9zLnN0YXJ0LmNvbHVtbisyXVxuICAgIGVuZDpcbiAgICAgIGZyb206IFt0YWdSYW5nZVBvcy5lbmQucm93LCB0YWdSYW5nZVBvcy5lbmQuY29sdW1uKzVdLFxuICAgICAgdG86IFt0YWdSYW5nZVBvcy5lbmQucm93LCB0YWdSYW5nZVBvcy5lbmQuY29sdW1uKzZdXG5cbiAgaWYgcmFuZ2UuZW5kLmZyb21bMF0gPiByYW5nZS5zdGFydC5mcm9tWzBdXG4gICAgcmFuZ2UuZW5kLmZyb21bMV0gPSByYW5nZS5lbmQuZnJvbVsxXSAtIDNcbiAgICByYW5nZS5lbmQudG9bMV0gPSByYW5nZS5lbmQudG9bMV0gLSAzXG5cbiAgbmV3U3RhcnRUYWdTZWxlY3RSYW5nZSA9IFtyYW5nZS5zdGFydC5mcm9tLCByYW5nZS5zdGFydC50b11cbiAgbmV3RW5kVGFnU2VsZWN0UmFuZ2UgPSBbcmFuZ2UuZW5kLmZyb20sIHJhbmdlLmVuZC50b11cblxuICBzZWxlY3Rpb24uaW5zZXJ0VGV4dChuZXdUZXh0KVxuICBzZWxlY3Rpb24uY3Vyc29yLnNldEJ1ZmZlclBvc2l0aW9uKFt0YWdSYW5nZVBvcy5zdGFydC5yb3csIHRhZ1JhbmdlUG9zLnN0YXJ0LmNvbHVtbisxXSlcbiAgZWRpdG9yLmFkZFNlbGVjdGlvbkZvckJ1ZmZlclJhbmdlKG5ld1N0YXJ0VGFnU2VsZWN0UmFuZ2UpXG4gIGVuZFRhZ1NlbGVjdGlvbiA9IGVkaXRvci5hZGRTZWxlY3Rpb25Gb3JCdWZmZXJSYW5nZShuZXdFbmRUYWdTZWxlY3RSYW5nZSlcblxuICBlZGl0b3JWaWV3ID0gYXRvbS52aWV3cy5nZXRWaWV3IGVkaXRvclxuICBlZGl0b3JWaWV3LmFkZEV2ZW50TGlzdGVuZXIgJ2tleWRvd24nLCAoZXZlbnQpIC0+XG4gICAgaWYgZXZlbnQua2V5Q29kZSBpcyAzMlxuICAgICAgZW5kVGFnU2VsZWN0aW9uLmN1cnNvci5tYXJrZXIuZGVzdHJveSgpXG4gICAgICBAcmVtb3ZlRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIGFyZ3VtZW50cy5jYWxsZWU7XG4iXX0=
