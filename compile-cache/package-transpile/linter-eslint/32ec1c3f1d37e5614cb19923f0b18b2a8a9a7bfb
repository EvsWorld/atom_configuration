'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _eslintRuleDocumentation = require('eslint-rule-documentation');

var _eslintRuleDocumentation2 = _interopRequireDefault(_eslintRuleDocumentation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Private properties
const rules = Symbol('rules');

/**
 * Stores a list of rules from ESLint
 */
class Rules {
  /**
   * Instantiates a Rules object, optionally with an existing list of rules
   * @param {Array} newRules Array of Arrays of the rule and properties
   */
  constructor(newRules) {
    this.replaceRules(newRules);
  }

  /**
   * Process the updated rules into the local Map and call further update functions
   * @param  {Array} newRules Array of Arrays of the rule and properties
   */
  replaceRules(newRules) {
    this[rules] = new Map(newRules);
  }

  /**
   * [getFixableRules description]
   * @return {Array} The ruleIds of the currently known fixable rules
   */
  getFixableRules() {
    return Array.from(this[rules]).reduce((fixable, [rule, props]) => {
      if (props && props.meta && props.meta.fixable) {
        return [...fixable, rule];
      }
      return fixable;
    }, []);
  }

  /**
   * Get the URL of the documentation for a rule, either from the rule's own
   * metadata, from eslint-rule-documentation's known rules, or the fallback URL
   * on how to add it to eslint-rule-documentation.
   * @param  {String} ruleId The rule ID to get the documentation URL for
   * @return {String}        URL of the rule documentation
   */
  getRuleUrl(ruleId) {
    const props = this[rules].get(ruleId);
    if (props && props.meta && props.meta.docs && props.meta.docs.url) {
      // The rule has a documentation URL specified in its metadata
      return props.meta.docs.url;
    }

    // The rule didn't specify a URL in its metadata, or was not currently known
    // somehow. Attempt to determine a URL using eslint-rule-documentation.
    return (0, _eslintRuleDocumentation2.default)(ruleId).url;
  }

  /**
   * Return the known rules.
   * @return {Map} The currently known rules
   */
  getRules() {
    return new Map(this[rules]);
  }
}
exports.default = Rules;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzLmpzIl0sIm5hbWVzIjpbInJ1bGVzIiwiU3ltYm9sIiwiUnVsZXMiLCJjb25zdHJ1Y3RvciIsIm5ld1J1bGVzIiwicmVwbGFjZVJ1bGVzIiwiTWFwIiwiZ2V0Rml4YWJsZVJ1bGVzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwiZml4YWJsZSIsInJ1bGUiLCJwcm9wcyIsIm1ldGEiLCJnZXRSdWxlVXJsIiwicnVsZUlkIiwiZ2V0IiwiZG9jcyIsInVybCIsImdldFJ1bGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0FBRUE7QUFDQSxNQUFNQSxRQUFRQyxPQUFPLE9BQVAsQ0FBZDs7QUFFQTs7O0FBR2UsTUFBTUMsS0FBTixDQUFZO0FBQ3pCOzs7O0FBSUFDLGNBQVlDLFFBQVosRUFBc0I7QUFDcEIsU0FBS0MsWUFBTCxDQUFrQkQsUUFBbEI7QUFDRDs7QUFFRDs7OztBQUlBQyxlQUFhRCxRQUFiLEVBQXVCO0FBQ3JCLFNBQUtKLEtBQUwsSUFBYyxJQUFJTSxHQUFKLENBQVFGLFFBQVIsQ0FBZDtBQUNEOztBQUVEOzs7O0FBSUFHLG9CQUFrQjtBQUNoQixXQUFPQyxNQUFNQyxJQUFOLENBQVcsS0FBS1QsS0FBTCxDQUFYLEVBQXdCVSxNQUF4QixDQUErQixDQUFDQyxPQUFELEVBQVUsQ0FBQ0MsSUFBRCxFQUFPQyxLQUFQLENBQVYsS0FBNEI7QUFDaEUsVUFBSUEsU0FBU0EsTUFBTUMsSUFBZixJQUF1QkQsTUFBTUMsSUFBTixDQUFXSCxPQUF0QyxFQUErQztBQUM3QyxlQUFPLENBQUMsR0FBR0EsT0FBSixFQUFhQyxJQUFiLENBQVA7QUFDRDtBQUNELGFBQU9ELE9BQVA7QUFDRCxLQUxNLEVBS0osRUFMSSxDQUFQO0FBTUQ7O0FBRUQ7Ozs7Ozs7QUFPQUksYUFBV0MsTUFBWCxFQUFtQjtBQUNqQixVQUFNSCxRQUFRLEtBQUtiLEtBQUwsRUFBWWlCLEdBQVosQ0FBZ0JELE1BQWhCLENBQWQ7QUFDQSxRQUFJSCxTQUFTQSxNQUFNQyxJQUFmLElBQXVCRCxNQUFNQyxJQUFOLENBQVdJLElBQWxDLElBQTBDTCxNQUFNQyxJQUFOLENBQVdJLElBQVgsQ0FBZ0JDLEdBQTlELEVBQW1FO0FBQ2pFO0FBQ0EsYUFBT04sTUFBTUMsSUFBTixDQUFXSSxJQUFYLENBQWdCQyxHQUF2QjtBQUNEOztBQUVEO0FBQ0E7QUFDQSxXQUFPLHVDQUFRSCxNQUFSLEVBQWdCRyxHQUF2QjtBQUNEOztBQUVEOzs7O0FBSUFDLGFBQVc7QUFDVCxXQUFPLElBQUlkLEdBQUosQ0FBUSxLQUFLTixLQUFMLENBQVIsQ0FBUDtBQUNEO0FBdkR3QjtrQkFBTkUsSyIsImZpbGUiOiJydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZXZhbmhlbmRyaXgxLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1lc2xpbnQvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJ1bGVVUkkgZnJvbSAnZXNsaW50LXJ1bGUtZG9jdW1lbnRhdGlvbidcblxuLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXG5jb25zdCBydWxlcyA9IFN5bWJvbCgncnVsZXMnKVxuXG4vKipcbiAqIFN0b3JlcyBhIGxpc3Qgb2YgcnVsZXMgZnJvbSBFU0xpbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVsZXMge1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGEgUnVsZXMgb2JqZWN0LCBvcHRpb25hbGx5IHdpdGggYW4gZXhpc3RpbmcgbGlzdCBvZiBydWxlc1xuICAgKiBAcGFyYW0ge0FycmF5fSBuZXdSdWxlcyBBcnJheSBvZiBBcnJheXMgb2YgdGhlIHJ1bGUgYW5kIHByb3BlcnRpZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5ld1J1bGVzKSB7XG4gICAgdGhpcy5yZXBsYWNlUnVsZXMobmV3UnVsZXMpXG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgdXBkYXRlZCBydWxlcyBpbnRvIHRoZSBsb2NhbCBNYXAgYW5kIGNhbGwgZnVydGhlciB1cGRhdGUgZnVuY3Rpb25zXG4gICAqIEBwYXJhbSAge0FycmF5fSBuZXdSdWxlcyBBcnJheSBvZiBBcnJheXMgb2YgdGhlIHJ1bGUgYW5kIHByb3BlcnRpZXNcbiAgICovXG4gIHJlcGxhY2VSdWxlcyhuZXdSdWxlcykge1xuICAgIHRoaXNbcnVsZXNdID0gbmV3IE1hcChuZXdSdWxlcylcbiAgfVxuXG4gIC8qKlxuICAgKiBbZ2V0Rml4YWJsZVJ1bGVzIGRlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIHtBcnJheX0gVGhlIHJ1bGVJZHMgb2YgdGhlIGN1cnJlbnRseSBrbm93biBmaXhhYmxlIHJ1bGVzXG4gICAqL1xuICBnZXRGaXhhYmxlUnVsZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpc1tydWxlc10pLnJlZHVjZSgoZml4YWJsZSwgW3J1bGUsIHByb3BzXSkgPT4ge1xuICAgICAgaWYgKHByb3BzICYmIHByb3BzLm1ldGEgJiYgcHJvcHMubWV0YS5maXhhYmxlKSB7XG4gICAgICAgIHJldHVybiBbLi4uZml4YWJsZSwgcnVsZV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmaXhhYmxlXG4gICAgfSwgW10pXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBVUkwgb2YgdGhlIGRvY3VtZW50YXRpb24gZm9yIGEgcnVsZSwgZWl0aGVyIGZyb20gdGhlIHJ1bGUncyBvd25cbiAgICogbWV0YWRhdGEsIGZyb20gZXNsaW50LXJ1bGUtZG9jdW1lbnRhdGlvbidzIGtub3duIHJ1bGVzLCBvciB0aGUgZmFsbGJhY2sgVVJMXG4gICAqIG9uIGhvdyB0byBhZGQgaXQgdG8gZXNsaW50LXJ1bGUtZG9jdW1lbnRhdGlvbi5cbiAgICogQHBhcmFtICB7U3RyaW5nfSBydWxlSWQgVGhlIHJ1bGUgSUQgdG8gZ2V0IHRoZSBkb2N1bWVudGF0aW9uIFVSTCBmb3JcbiAgICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgVVJMIG9mIHRoZSBydWxlIGRvY3VtZW50YXRpb25cbiAgICovXG4gIGdldFJ1bGVVcmwocnVsZUlkKSB7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzW3J1bGVzXS5nZXQocnVsZUlkKVxuICAgIGlmIChwcm9wcyAmJiBwcm9wcy5tZXRhICYmIHByb3BzLm1ldGEuZG9jcyAmJiBwcm9wcy5tZXRhLmRvY3MudXJsKSB7XG4gICAgICAvLyBUaGUgcnVsZSBoYXMgYSBkb2N1bWVudGF0aW9uIFVSTCBzcGVjaWZpZWQgaW4gaXRzIG1ldGFkYXRhXG4gICAgICByZXR1cm4gcHJvcHMubWV0YS5kb2NzLnVybFxuICAgIH1cblxuICAgIC8vIFRoZSBydWxlIGRpZG4ndCBzcGVjaWZ5IGEgVVJMIGluIGl0cyBtZXRhZGF0YSwgb3Igd2FzIG5vdCBjdXJyZW50bHkga25vd25cbiAgICAvLyBzb21laG93LiBBdHRlbXB0IHRvIGRldGVybWluZSBhIFVSTCB1c2luZyBlc2xpbnQtcnVsZS1kb2N1bWVudGF0aW9uLlxuICAgIHJldHVybiBydWxlVVJJKHJ1bGVJZCkudXJsXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBrbm93biBydWxlcy5cbiAgICogQHJldHVybiB7TWFwfSBUaGUgY3VycmVudGx5IGtub3duIHJ1bGVzXG4gICAqL1xuICBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzW3J1bGVzXSlcbiAgfVxufVxuIl19