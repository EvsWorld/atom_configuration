'use strict';
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processJobResponse = exports.processESLintMessages = exports.generateDebugString = exports.getDebugInfo = exports.sendJob = exports.rules = undefined;

/**
 * Send a job to the worker and return the results
 * @param  {Object} config Configuration for the job to send to the worker
 * @return {Object|String|Error}        The data returned from the worker
 */
let sendJob = exports.sendJob = (() => {
  var _ref = _asyncToGenerator(function* (config) {
    if (worker && !worker.childProcess.connected) {
      // Sometimes the worker dies and becomes disconnected
      // When that happens, it seems that there is no way to recover other
      // than to kill the worker and create a new one.
      killWorker();
    }

    // Ensure the worker is started
    startWorker();

    // Expand the config with a unique ID to emit on
    // NOTE: Jobs _must_ have a unique ID as they are completely async and results
    // can arrive back in any order.
    // eslint-disable-next-line no-param-reassign
    config.emitKey = (0, _cryptoRandomString2.default)(10);

    return new Promise(function (resolve, reject) {
      // All worker errors are caught and re-emitted along with their associated
      // emitKey, so that we do not create multiple listeners for the same
      // 'task:error' event
      const errSub = worker.on(`workerError:${config.emitKey}`, function ({ msg, stack }) {
        // Re-throw errors from the task
        const error = new Error(msg);
        // Set the stack to the one given to us by the worker
        error.stack = stack;
        errSub.dispose();
        // eslint-disable-next-line no-use-before-define
        responseSub.dispose();
        reject(error);
      });
      const responseSub = worker.on(config.emitKey, function (data) {
        errSub.dispose();
        responseSub.dispose();
        resolve(data);
      });
      // Send the job on to the worker
      try {
        worker.send(config);
      } catch (e) {
        errSub.dispose();
        responseSub.dispose();
        console.error(e);
      }
    });
  });

  return function sendJob(_x) {
    return _ref.apply(this, arguments);
  };
})();

let getDebugInfo = exports.getDebugInfo = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    const textEditor = atom.workspace.getActiveTextEditor();
    let filePath;
    let editorScopes;
    if (atom.workspace.isTextEditor(textEditor)) {
      filePath = textEditor.getPath();
      editorScopes = textEditor.getLastCursor().getScopeDescriptor().getScopesArray();
    } else {
      // Somehow this can be called with no active TextEditor, impossible I know...
      filePath = 'unknown';
      editorScopes = ['unknown'];
    }
    const packagePath = atom.packages.resolvePackagePath('linter-eslint');
    let linterEslintMeta;
    if (packagePath === undefined) {
      // Apparently for some users the package path fails to resolve
      linterEslintMeta = { version: 'unknown!' };
    } else {
      // eslint-disable-next-line import/no-dynamic-require
      linterEslintMeta = require((0, _path.join)(packagePath, 'package.json'));
    }
    const config = atom.config.get('linter-eslint');
    const hoursSinceRestart = Math.round(process.uptime() / 3600 * 10) / 10;
    let returnVal;
    try {
      const response = yield sendJob({
        type: 'debug',
        config,
        filePath
      });
      returnVal = {
        atomVersion: atom.getVersion(),
        linterEslintVersion: linterEslintMeta.version,
        linterEslintConfig: config,
        // eslint-disable-next-line import/no-dynamic-require
        eslintVersion: require((0, _path.join)(response.path, 'package.json')).version,
        hoursSinceRestart,
        platform: process.platform,
        eslintType: response.type,
        eslintPath: response.path,
        editorScopes
      };
    } catch (error) {
      atom.notifications.addError(`${error}`);
    }
    return returnVal;
  });

  return function getDebugInfo() {
    return _ref2.apply(this, arguments);
  };
})();

let generateDebugString = exports.generateDebugString = (() => {
  var _ref3 = _asyncToGenerator(function* () {
    const debug = yield getDebugInfo();
    const details = [`Atom version: ${debug.atomVersion}`, `linter-eslint version: ${debug.linterEslintVersion}`, `ESLint version: ${debug.eslintVersion}`, `Hours since last Atom restart: ${debug.hoursSinceRestart}`, `Platform: ${debug.platform}`, `Using ${debug.eslintType} ESLint from: ${debug.eslintPath}`, `Current file's scopes: ${JSON.stringify(debug.editorScopes, null, 2)}`, `linter-eslint configuration: ${JSON.stringify(debug.linterEslintConfig, null, 2)}`];
    return details.join('\n');
  });

  return function generateDebugString() {
    return _ref3.apply(this, arguments);
  };
})();

/**
 * Turn the given options into a Linter message array
 * @param  {TextEditor} textEditor The TextEditor to use to build the message
 * @param  {Object} options    The parameters used to fill in the message
 * @param  {string} [options.severity='error'] Can be one of: 'error', 'warning', 'info'
 * @param  {string} [options.excerpt=''] Short text to use in the message
 * @param  {string|Function} [options.description] Used to provide additional information
 * @return {Array}            Message to user generated from the parameters
 */


/**
 * Given a raw response from ESLint, this processes the messages into a format
 * compatible with the Linter API.
 * @param  {Object}     messages   The messages from ESLint's response
 * @param  {TextEditor} textEditor The Atom::TextEditor of the file the messages belong to
 * @param  {bool}       showRule   Whether to show the rule in the messages
 * @return {Promise}               The messages transformed into Linter messages
 */
let processESLintMessages = exports.processESLintMessages = (() => {
  var _ref5 = _asyncToGenerator(function* (messages, textEditor, showRule) {
    return Promise.all(messages.map((() => {
      var _ref6 = _asyncToGenerator(function* ({
        fatal, message: originalMessage, line, severity, ruleId, column, fix, endLine, endColumn
      }) {
        const message = fatal ? originalMessage.split('\n')[0] : originalMessage;
        const filePath = textEditor.getPath();
        const textBuffer = textEditor.getBuffer();
        let linterFix = null;
        if (fix) {
          const fixRange = new _atom.Range(textBuffer.positionForCharacterIndex(fix.range[0]), textBuffer.positionForCharacterIndex(fix.range[1]));
          linterFix = {
            position: fixRange,
            replaceWith: fix.text
          };
        }
        let msgCol;
        let msgEndLine;
        let msgEndCol;
        let eslintFullRange = false;

        /*
         Note: ESLint positions are 1-indexed, while Atom expects 0-indexed,
         positions. We are subtracting 1 from these values here so we don't have to
         keep doing so in later uses.
         */
        const msgLine = line - 1;
        if (typeof endColumn !== 'undefined' && typeof endLine !== 'undefined') {
          eslintFullRange = true;
          // Here we always want the column to be a number
          msgCol = Math.max(0, column - 1);
          msgEndLine = endLine - 1;
          msgEndCol = endColumn - 1;
        } else {
          // We want msgCol to remain undefined if it was initially so
          // `generateRange` will give us a range over the entire line
          msgCol = typeof column !== 'undefined' ? column - 1 : column;
        }

        let ret = {
          severity: severity === 1 ? 'warning' : 'error',
          location: {
            file: filePath
          }
        };

        if (ruleId) {
          ret.url = rules.getRuleUrl(ruleId);
        }

        let range;
        try {
          if (eslintFullRange) {
            const buffer = textEditor.getBuffer();
            (0, _editor.throwIfInvalidPoint)(buffer, msgLine, msgCol);
            (0, _editor.throwIfInvalidPoint)(buffer, msgEndLine, msgEndCol);
            range = [[msgLine, msgCol], [msgEndLine, msgEndCol]];
          } else {
            range = (0, _atomLinter.generateRange)(textEditor, msgLine, msgCol);
          }
          ret.location.position = range;

          const ruleAppendix = showRule ? ` (${ruleId || 'Fatal'})` : '';
          ret.excerpt = `${message}${ruleAppendix}`;

          if (linterFix) {
            ret.solutions = [linterFix];
          }
        } catch (err) {
          ret = yield generateInvalidTrace({
            msgLine,
            msgCol,
            msgEndLine,
            msgEndCol,
            eslintFullRange,
            filePath,
            textEditor,
            ruleId,
            message
          });
        }

        return ret;
      });

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    })()));
  });

  return function processESLintMessages(_x3, _x4, _x5) {
    return _ref5.apply(this, arguments);
  };
})();

/**
 * Processes the response from the lint job
 * @param  {Object}     response   The raw response from the job
 * @param  {TextEditor} textEditor The Atom::TextEditor of the file the messages belong to
 * @param  {bool}       showRule   Whether to show the rule in the messages
 * @return {Promise}               The messages transformed into Linter messages
 */


let processJobResponse = exports.processJobResponse = (() => {
  var _ref7 = _asyncToGenerator(function* (response, textEditor, showRule) {
    if (Object.prototype.hasOwnProperty.call(response, 'updatedRules')) {
      rules.replaceRules(response.updatedRules);
    }
    return processESLintMessages(response.messages, textEditor, showRule);
  });

  return function processJobResponse(_x7, _x8, _x9) {
    return _ref7.apply(this, arguments);
  };
})();

exports.startWorker = startWorker;
exports.killWorker = killWorker;
exports.generateUserMessage = generateUserMessage;
exports.handleError = handleError;

var _path = require('path');

var _atomLinter = require('atom-linter');

var _cryptoRandomString = require('crypto-random-string');

var _cryptoRandomString2 = _interopRequireDefault(_cryptoRandomString);

var _atom = require('atom');

var _rules = require('./rules');

var _rules2 = _interopRequireDefault(_rules);

var _editor = require('./validate/editor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
// eslint-disable-next-line import/no-extraneous-dependencies, import/extensions


const rules = exports.rules = new _rules2.default();
let worker = null;

/**
 * Start the worker process if it hasn't already been started
 */
function startWorker() {
  if (worker === null) {
    worker = new _atom.Task(require.resolve('./worker.js'));
  }

  if (worker.started) {
    // Worker start request has already been sent
    return;
  }
  // Send empty arguments as we don't use them in the worker
  worker.start([]);

  // NOTE: Modifies the Task of the worker, but it's the only clean way to track this
  worker.started = true;
}

/**
 * Forces the worker Task to kill itself
 */
function killWorker() {
  if (worker !== null) {
    worker.terminate();
    worker = null;
  }
}function generateUserMessage(textEditor, options) {
  const {
    severity = 'error',
    excerpt = '',
    description
  } = options;
  return [{
    severity,
    excerpt,
    description,
    location: {
      file: textEditor.getPath(),
      position: (0, _atomLinter.generateRange)(textEditor)
    }
  }];
}

/**
 * Generates a message to the user in order to nicely display the Error being
 * thrown instead of depending on generic error handling.
 * @param  {TextEditor} textEditor The TextEditor to use to build the message
 * @param  {Error} error      Error to generate a message for
 * @return {Array}            Message to user generated from the Error
 */
function handleError(textEditor, error) {
  const { stack, message } = error;
  // Only show the first line of the message as the excerpt
  const excerpt = `Error while running ESLint: ${message.split('\n')[0]}.`;
  const description = `<div style="white-space: pre-wrap">${message}\n<hr />${stack}</div>`;
  return generateUserMessage(textEditor, { severity: 'error', excerpt, description });
}

const generateInvalidTrace = (() => {
  var _ref4 = _asyncToGenerator(function* ({
    msgLine, msgCol, msgEndLine, msgEndCol,
    eslintFullRange, filePath, textEditor, ruleId, message
  }) {
    let errMsgRange = `${msgLine + 1}:${msgCol}`;
    if (eslintFullRange) {
      errMsgRange += ` - ${msgEndLine + 1}:${msgEndCol + 1}`;
    }
    const rangeText = `Requested ${eslintFullRange ? 'start point' : 'range'}: ${errMsgRange}`;
    const issueURL = 'https://github.com/AtomLinter/linter-eslint/issues/new';
    const titleText = `Invalid position given by '${ruleId}'`;
    const title = encodeURIComponent(titleText);
    const body = encodeURIComponent(['ESLint returned a point that did not exist in the document being edited.', `Rule: \`${ruleId}\``, rangeText, '', '', '<!-- If at all possible, please include code to reproduce this issue! -->', '', '', 'Debug information:', '```json', JSON.stringify((yield getDebugInfo()), null, 2), '```'].join('\n'));

    const location = {
      file: filePath,
      position: (0, _atomLinter.generateRange)(textEditor, 0)
    };
    const newIssueURL = `${issueURL}?title=${title}&body=${body}`;

    return {
      severity: 'error',
      excerpt: `${titleText}. See the description for details. ` + 'Click the URL to open a new issue!',
      url: newIssueURL,
      location,
      description: `${rangeText}\nOriginal message: ${message}`
    };
  });

  return function generateInvalidTrace(_x2) {
    return _ref4.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiY29uZmlnIiwid29ya2VyIiwiY2hpbGRQcm9jZXNzIiwiY29ubmVjdGVkIiwia2lsbFdvcmtlciIsInN0YXJ0V29ya2VyIiwiZW1pdEtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyU3ViIiwib24iLCJtc2ciLCJzdGFjayIsImVycm9yIiwiRXJyb3IiLCJkaXNwb3NlIiwicmVzcG9uc2VTdWIiLCJkYXRhIiwic2VuZCIsImUiLCJjb25zb2xlIiwic2VuZEpvYiIsInRleHRFZGl0b3IiLCJhdG9tIiwid29ya3NwYWNlIiwiZ2V0QWN0aXZlVGV4dEVkaXRvciIsImZpbGVQYXRoIiwiZWRpdG9yU2NvcGVzIiwiaXNUZXh0RWRpdG9yIiwiZ2V0UGF0aCIsImdldExhc3RDdXJzb3IiLCJnZXRTY29wZURlc2NyaXB0b3IiLCJnZXRTY29wZXNBcnJheSIsInBhY2thZ2VQYXRoIiwicGFja2FnZXMiLCJyZXNvbHZlUGFja2FnZVBhdGgiLCJsaW50ZXJFc2xpbnRNZXRhIiwidW5kZWZpbmVkIiwidmVyc2lvbiIsInJlcXVpcmUiLCJnZXQiLCJob3Vyc1NpbmNlUmVzdGFydCIsIk1hdGgiLCJyb3VuZCIsInByb2Nlc3MiLCJ1cHRpbWUiLCJyZXR1cm5WYWwiLCJyZXNwb25zZSIsInR5cGUiLCJhdG9tVmVyc2lvbiIsImdldFZlcnNpb24iLCJsaW50ZXJFc2xpbnRWZXJzaW9uIiwibGludGVyRXNsaW50Q29uZmlnIiwiZXNsaW50VmVyc2lvbiIsInBhdGgiLCJwbGF0Zm9ybSIsImVzbGludFR5cGUiLCJlc2xpbnRQYXRoIiwibm90aWZpY2F0aW9ucyIsImFkZEVycm9yIiwiZ2V0RGVidWdJbmZvIiwiZGVidWciLCJkZXRhaWxzIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJnZW5lcmF0ZURlYnVnU3RyaW5nIiwibWVzc2FnZXMiLCJzaG93UnVsZSIsImFsbCIsIm1hcCIsImZhdGFsIiwibWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsImxpbmUiLCJzZXZlcml0eSIsInJ1bGVJZCIsImNvbHVtbiIsImZpeCIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJzcGxpdCIsInRleHRCdWZmZXIiLCJnZXRCdWZmZXIiLCJsaW50ZXJGaXgiLCJmaXhSYW5nZSIsInBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgiLCJyYW5nZSIsInBvc2l0aW9uIiwicmVwbGFjZVdpdGgiLCJ0ZXh0IiwibXNnQ29sIiwibXNnRW5kTGluZSIsIm1zZ0VuZENvbCIsImVzbGludEZ1bGxSYW5nZSIsIm1zZ0xpbmUiLCJtYXgiLCJyZXQiLCJsb2NhdGlvbiIsImZpbGUiLCJ1cmwiLCJydWxlcyIsImdldFJ1bGVVcmwiLCJidWZmZXIiLCJydWxlQXBwZW5kaXgiLCJleGNlcnB0Iiwic29sdXRpb25zIiwiZXJyIiwiZ2VuZXJhdGVJbnZhbGlkVHJhY2UiLCJwcm9jZXNzRVNMaW50TWVzc2FnZXMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyZXBsYWNlUnVsZXMiLCJ1cGRhdGVkUnVsZXMiLCJwcm9jZXNzSm9iUmVzcG9uc2UiLCJnZW5lcmF0ZVVzZXJNZXNzYWdlIiwiaGFuZGxlRXJyb3IiLCJzdGFydGVkIiwic3RhcnQiLCJ0ZXJtaW5hdGUiLCJvcHRpb25zIiwiZGVzY3JpcHRpb24iLCJlcnJNc2dSYW5nZSIsInJhbmdlVGV4dCIsImlzc3VlVVJMIiwidGl0bGVUZXh0IiwidGl0bGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJib2R5IiwibmV3SXNzdWVVUkwiXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztBQTBDQTs7Ozs7OytCQUtPLFdBQXVCQSxNQUF2QixFQUErQjtBQUNwQyxRQUFJQyxVQUFVLENBQUNBLE9BQU9DLFlBQVAsQ0FBb0JDLFNBQW5DLEVBQThDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBQztBQUNEOztBQUVEO0FBQ0FDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FMLFdBQU9NLE9BQVAs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ZDtBQUNBLFVBQU1HLE9BQU9ELG1CQUFtQixDQUM5QiwwRUFEOEIsRUFFN0IsV0FBVXJELE1BQU8sSUFGWSxFQUc5QmlELFNBSDhCLEVBSTlCLEVBSjhCLEVBSTFCLEVBSjBCLEVBSzlCLDJFQUw4QixFQU05QixFQU44QixFQU0xQixFQU4wQixFQU85QixvQkFQOEIsRUFROUIsU0FSOEIsRUFTOUI5RCxLQUFLQyxTQUFMLEVBQWUsTUFBTUosY0FBckIsR0FBcUMsSUFBckMsRUFBMkMsQ0FBM0MsQ0FUOEIsRUFVOUIsS0FWOEIsRUFXOUJLLElBWDhCLENBV3pCLElBWHlCLENBQW5CLENBQWI7O0FBYUEsVUFBTWlDLFdBQVc7QUFDZkMsWUFBTXpFLFFBRFM7QUFFZjhELGdCQUFVLCtCQUFjbEUsVUFBZCxFQUEwQixDQUExQjtBQUZLLEtBQWpCO0FBSUEsVUFBTTZHLGNBQWUsR0FBRUwsUUFBUyxVQUFTRSxLQUFNLFNBQVFFLElBQUssRUFBNUQ7O0FBRUEsV0FBTztBQUNMdkQsZ0JBQVUsT0FETDtBQUVMOEIsZUFBVSxHQUFFc0IsU0FBVSxxQ0FBYixHQUNQLG9DQUhHO0FBSUwzQixXQUFLK0IsV0FKQTtBQUtMakMsY0FMSztBQU1MeUIsbUJBQWMsR0FBRUUsU0FBVSx1QkFBc0JyRCxPQUFRO0FBTm5ELEtBQVA7QUFRRCxHQXZDSzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2V2YW5oZW5kcml4MS8uYXRvbS9wYWNrYWdlcy9saW50ZXItZXNsaW50L3NyYyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgZ2VuZXJhdGVSYW5nZSB9IGZyb20gJ2F0b20tbGludGVyJ1xuaW1wb3J0IGNyeXB0b1JhbmRvbVN0cmluZyBmcm9tICdjcnlwdG8tcmFuZG9tLXN0cmluZydcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMsIGltcG9ydC9leHRlbnNpb25zXG5pbXBvcnQgeyBSYW5nZSwgVGFzayB9IGZyb20gJ2F0b20nXG5pbXBvcnQgUnVsZXMgZnJvbSAnLi9ydWxlcydcbmltcG9ydCB7IHRocm93SWZJbnZhbGlkUG9pbnQgfSBmcm9tICcuL3ZhbGlkYXRlL2VkaXRvcidcblxuZXhwb3J0IGNvbnN0IHJ1bGVzID0gbmV3IFJ1bGVzKClcbmxldCB3b3JrZXIgPSBudWxsXG5cbi8qKlxuICogU3RhcnQgdGhlIHdvcmtlciBwcm9jZXNzIGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gc3RhcnRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXb3JrZXIoKSB7XG4gIGlmICh3b3JrZXIgPT09IG51bGwpIHtcbiAgICB3b3JrZXIgPSBuZXcgVGFzayhyZXF1aXJlLnJlc29sdmUoJy4vd29ya2VyLmpzJykpXG4gIH1cblxuICBpZiAod29ya2VyLnN0YXJ0ZWQpIHtcbiAgICAvLyBXb3JrZXIgc3RhcnQgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuIHNlbnRcbiAgICByZXR1cm5cbiAgfVxuICAvLyBTZW5kIGVtcHR5IGFyZ3VtZW50cyBhcyB3ZSBkb24ndCB1c2UgdGhlbSBpbiB0aGUgd29ya2VyXG4gIHdvcmtlci5zdGFydChbXSlcblxuICAvLyBOT1RFOiBNb2RpZmllcyB0aGUgVGFzayBvZiB0aGUgd29ya2VyLCBidXQgaXQncyB0aGUgb25seSBjbGVhbiB3YXkgdG8gdHJhY2sgdGhpc1xuICB3b3JrZXIuc3RhcnRlZCA9IHRydWVcbn1cblxuLyoqXG4gKiBGb3JjZXMgdGhlIHdvcmtlciBUYXNrIHRvIGtpbGwgaXRzZWxmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBraWxsV29ya2VyKCkge1xuICBpZiAod29ya2VyICE9PSBudWxsKSB7XG4gICAgd29ya2VyLnRlcm1pbmF0ZSgpXG4gICAgd29ya2VyID0gbnVsbFxuICB9XG59XG5cbi8qKlxuICogU2VuZCBhIGpvYiB0byB0aGUgd29ya2VyIGFuZCByZXR1cm4gdGhlIHJlc3VsdHNcbiAqIEBwYXJhbSAge09iamVjdH0gY29uZmlnIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBqb2IgdG8gc2VuZCB0byB0aGUgd29ya2VyXG4gKiBAcmV0dXJuIHtPYmplY3R8U3RyaW5nfEVycm9yfSAgICAgICAgVGhlIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgd29ya2VyXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kSm9iKGNvbmZpZykge1xuICBpZiAod29ya2VyICYmICF3b3JrZXIuY2hpbGRQcm9jZXNzLmNvbm5lY3RlZCkge1xuICAgIC8vIFNvbWV0aW1lcyB0aGUgd29ya2VyIGRpZXMgYW5kIGJlY29tZXMgZGlzY29ubmVjdGVkXG4gICAgLy8gV2hlbiB0aGF0IGhhcHBlbnMsIGl0IHNlZW1zIHRoYXQgdGhlcmUgaXMgbm8gd2F5IHRvIHJlY292ZXIgb3RoZXJcbiAgICAvLyB0aGFuIHRvIGtpbGwgdGhlIHdvcmtlciBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICBraWxsV29ya2VyKClcbiAgfVxuXG4gIC8vIEVuc3VyZSB0aGUgd29ya2VyIGlzIHN0YXJ0ZWRcbiAgc3RhcnRXb3JrZXIoKVxuXG4gIC8vIEV4cGFuZCB0aGUgY29uZmlnIHdpdGggYSB1bmlxdWUgSUQgdG8gZW1pdCBvblxuICAvLyBOT1RFOiBKb2JzIF9tdXN0XyBoYXZlIGEgdW5pcXVlIElEIGFzIHRoZXkgYXJlIGNvbXBsZXRlbHkgYXN5bmMgYW5kIHJlc3VsdHNcbiAgLy8gY2FuIGFycml2ZSBiYWNrIGluIGFueSBvcmRlci5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZy5lbWl0S2V5ID0gY3J5cHRvUmFuZG9tU3RyaW5nKDEwKVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gQWxsIHdvcmtlciBlcnJvcnMgYXJlIGNhdWdodCBhbmQgcmUtZW1pdHRlZCBhbG9uZyB3aXRoIHRoZWlyIGFzc29jaWF0ZWRcbiAgICAvLyBlbWl0S2V5LCBzbyB0aGF0IHdlIGRvIG5vdCBjcmVhdGUgbXVsdGlwbGUgbGlzdGVuZXJzIGZvciB0aGUgc2FtZVxuICAgIC8vICd0YXNrOmVycm9yJyBldmVudFxuICAgIGNvbnN0IGVyclN1YiA9IHdvcmtlci5vbihgd29ya2VyRXJyb3I6JHtjb25maWcuZW1pdEtleX1gLCAoeyBtc2csIHN0YWNrIH0pID0+IHtcbiAgICAgIC8vIFJlLXRocm93IGVycm9ycyBmcm9tIHRoZSB0YXNrXG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtc2cpXG4gICAgICAvLyBTZXQgdGhlIHN0YWNrIHRvIHRoZSBvbmUgZ2l2ZW4gdG8gdXMgYnkgdGhlIHdvcmtlclxuICAgICAgZXJyb3Iuc3RhY2sgPSBzdGFja1xuICAgICAgZXJyU3ViLmRpc3Bvc2UoKVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICByZXNwb25zZVN1Yi5kaXNwb3NlKClcbiAgICAgIHJlamVjdChlcnJvcilcbiAgICB9KVxuICAgIGNvbnN0IHJlc3BvbnNlU3ViID0gd29ya2VyLm9uKGNvbmZpZy5lbWl0S2V5LCAoZGF0YSkgPT4ge1xuICAgICAgZXJyU3ViLmRpc3Bvc2UoKVxuICAgICAgcmVzcG9uc2VTdWIuZGlzcG9zZSgpXG4gICAgICByZXNvbHZlKGRhdGEpXG4gICAgfSlcbiAgICAvLyBTZW5kIHRoZSBqb2Igb24gdG8gdGhlIHdvcmtlclxuICAgIHRyeSB7XG4gICAgICB3b3JrZXIuc2VuZChjb25maWcpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyU3ViLmRpc3Bvc2UoKVxuICAgICAgcmVzcG9uc2VTdWIuZGlzcG9zZSgpXG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGVidWdJbmZvKCkge1xuICBjb25zdCB0ZXh0RWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXG4gIGxldCBmaWxlUGF0aFxuICBsZXQgZWRpdG9yU2NvcGVzXG4gIGlmIChhdG9tLndvcmtzcGFjZS5pc1RleHRFZGl0b3IodGV4dEVkaXRvcikpIHtcbiAgICBmaWxlUGF0aCA9IHRleHRFZGl0b3IuZ2V0UGF0aCgpXG4gICAgZWRpdG9yU2NvcGVzID0gdGV4dEVkaXRvci5nZXRMYXN0Q3Vyc29yKCkuZ2V0U2NvcGVEZXNjcmlwdG9yKCkuZ2V0U2NvcGVzQXJyYXkoKVxuICB9IGVsc2Uge1xuICAgIC8vIFNvbWVob3cgdGhpcyBjYW4gYmUgY2FsbGVkIHdpdGggbm8gYWN0aXZlIFRleHRFZGl0b3IsIGltcG9zc2libGUgSSBrbm93Li4uXG4gICAgZmlsZVBhdGggPSAndW5rbm93bidcbiAgICBlZGl0b3JTY29wZXMgPSBbJ3Vua25vd24nXVxuICB9XG4gIGNvbnN0IHBhY2thZ2VQYXRoID0gYXRvbS5wYWNrYWdlcy5yZXNvbHZlUGFja2FnZVBhdGgoJ2xpbnRlci1lc2xpbnQnKVxuICBsZXQgbGludGVyRXNsaW50TWV0YVxuICBpZiAocGFja2FnZVBhdGggPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEFwcGFyZW50bHkgZm9yIHNvbWUgdXNlcnMgdGhlIHBhY2thZ2UgcGF0aCBmYWlscyB0byByZXNvbHZlXG4gICAgbGludGVyRXNsaW50TWV0YSA9IHsgdmVyc2lvbjogJ3Vua25vd24hJyB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmVcbiAgICBsaW50ZXJFc2xpbnRNZXRhID0gcmVxdWlyZShqb2luKHBhY2thZ2VQYXRoLCAncGFja2FnZS5qc29uJykpXG4gIH1cbiAgY29uc3QgY29uZmlnID0gYXRvbS5jb25maWcuZ2V0KCdsaW50ZXItZXNsaW50JylcbiAgY29uc3QgaG91cnNTaW5jZVJlc3RhcnQgPSBNYXRoLnJvdW5kKChwcm9jZXNzLnVwdGltZSgpIC8gMzYwMCkgKiAxMCkgLyAxMFxuICBsZXQgcmV0dXJuVmFsXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZW5kSm9iKHtcbiAgICAgIHR5cGU6ICdkZWJ1ZycsXG4gICAgICBjb25maWcsXG4gICAgICBmaWxlUGF0aFxuICAgIH0pXG4gICAgcmV0dXJuVmFsID0ge1xuICAgICAgYXRvbVZlcnNpb246IGF0b20uZ2V0VmVyc2lvbigpLFxuICAgICAgbGludGVyRXNsaW50VmVyc2lvbjogbGludGVyRXNsaW50TWV0YS52ZXJzaW9uLFxuICAgICAgbGludGVyRXNsaW50Q29uZmlnOiBjb25maWcsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZVxuICAgICAgZXNsaW50VmVyc2lvbjogcmVxdWlyZShqb2luKHJlc3BvbnNlLnBhdGgsICdwYWNrYWdlLmpzb24nKSkudmVyc2lvbixcbiAgICAgIGhvdXJzU2luY2VSZXN0YXJ0LFxuICAgICAgcGxhdGZvcm06IHByb2Nlc3MucGxhdGZvcm0sXG4gICAgICBlc2xpbnRUeXBlOiByZXNwb25zZS50eXBlLFxuICAgICAgZXNsaW50UGF0aDogcmVzcG9uc2UucGF0aCxcbiAgICAgIGVkaXRvclNjb3BlcyxcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGAke2Vycm9yfWApXG4gIH1cbiAgcmV0dXJuIHJldHVyblZhbFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVEZWJ1Z1N0cmluZygpIHtcbiAgY29uc3QgZGVidWcgPSBhd2FpdCBnZXREZWJ1Z0luZm8oKVxuICBjb25zdCBkZXRhaWxzID0gW1xuICAgIGBBdG9tIHZlcnNpb246ICR7ZGVidWcuYXRvbVZlcnNpb259YCxcbiAgICBgbGludGVyLWVzbGludCB2ZXJzaW9uOiAke2RlYnVnLmxpbnRlckVzbGludFZlcnNpb259YCxcbiAgICBgRVNMaW50IHZlcnNpb246ICR7ZGVidWcuZXNsaW50VmVyc2lvbn1gLFxuICAgIGBIb3VycyBzaW5jZSBsYXN0IEF0b20gcmVzdGFydDogJHtkZWJ1Zy5ob3Vyc1NpbmNlUmVzdGFydH1gLFxuICAgIGBQbGF0Zm9ybTogJHtkZWJ1Zy5wbGF0Zm9ybX1gLFxuICAgIGBVc2luZyAke2RlYnVnLmVzbGludFR5cGV9IEVTTGludCBmcm9tOiAke2RlYnVnLmVzbGludFBhdGh9YCxcbiAgICBgQ3VycmVudCBmaWxlJ3Mgc2NvcGVzOiAke0pTT04uc3RyaW5naWZ5KGRlYnVnLmVkaXRvclNjb3BlcywgbnVsbCwgMil9YCxcbiAgICBgbGludGVyLWVzbGludCBjb25maWd1cmF0aW9uOiAke0pTT04uc3RyaW5naWZ5KGRlYnVnLmxpbnRlckVzbGludENvbmZpZywgbnVsbCwgMil9YFxuICBdXG4gIHJldHVybiBkZXRhaWxzLmpvaW4oJ1xcbicpXG59XG5cbi8qKlxuICogVHVybiB0aGUgZ2l2ZW4gb3B0aW9ucyBpbnRvIGEgTGludGVyIG1lc3NhZ2UgYXJyYXlcbiAqIEBwYXJhbSAge1RleHRFZGl0b3J9IHRleHRFZGl0b3IgVGhlIFRleHRFZGl0b3IgdG8gdXNlIHRvIGJ1aWxkIHRoZSBtZXNzYWdlXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgICAgVGhlIHBhcmFtZXRlcnMgdXNlZCB0byBmaWxsIGluIHRoZSBtZXNzYWdlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtvcHRpb25zLnNldmVyaXR5PSdlcnJvciddIENhbiBiZSBvbmUgb2Y6ICdlcnJvcicsICd3YXJuaW5nJywgJ2luZm8nXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtvcHRpb25zLmV4Y2VycHQ9JyddIFNob3J0IHRleHQgdG8gdXNlIGluIHRoZSBtZXNzYWdlXG4gKiBAcGFyYW0gIHtzdHJpbmd8RnVuY3Rpb259IFtvcHRpb25zLmRlc2NyaXB0aW9uXSBVc2VkIHRvIHByb3ZpZGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgTWVzc2FnZSB0byB1c2VyIGdlbmVyYXRlZCBmcm9tIHRoZSBwYXJhbWV0ZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVVzZXJNZXNzYWdlKHRleHRFZGl0b3IsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHNldmVyaXR5ID0gJ2Vycm9yJyxcbiAgICBleGNlcnB0ID0gJycsXG4gICAgZGVzY3JpcHRpb24sXG4gIH0gPSBvcHRpb25zXG4gIHJldHVybiBbe1xuICAgIHNldmVyaXR5LFxuICAgIGV4Y2VycHQsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgbG9jYXRpb246IHtcbiAgICAgIGZpbGU6IHRleHRFZGl0b3IuZ2V0UGF0aCgpLFxuICAgICAgcG9zaXRpb246IGdlbmVyYXRlUmFuZ2UodGV4dEVkaXRvciksXG4gICAgfSxcbiAgfV1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtZXNzYWdlIHRvIHRoZSB1c2VyIGluIG9yZGVyIHRvIG5pY2VseSBkaXNwbGF5IHRoZSBFcnJvciBiZWluZ1xuICogdGhyb3duIGluc3RlYWQgb2YgZGVwZW5kaW5nIG9uIGdlbmVyaWMgZXJyb3IgaGFuZGxpbmcuXG4gKiBAcGFyYW0gIHtUZXh0RWRpdG9yfSB0ZXh0RWRpdG9yIFRoZSBUZXh0RWRpdG9yIHRvIHVzZSB0byBidWlsZCB0aGUgbWVzc2FnZVxuICogQHBhcmFtICB7RXJyb3J9IGVycm9yICAgICAgRXJyb3IgdG8gZ2VuZXJhdGUgYSBtZXNzYWdlIGZvclxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgTWVzc2FnZSB0byB1c2VyIGdlbmVyYXRlZCBmcm9tIHRoZSBFcnJvclxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3IodGV4dEVkaXRvciwgZXJyb3IpIHtcbiAgY29uc3QgeyBzdGFjaywgbWVzc2FnZSB9ID0gZXJyb3JcbiAgLy8gT25seSBzaG93IHRoZSBmaXJzdCBsaW5lIG9mIHRoZSBtZXNzYWdlIGFzIHRoZSBleGNlcnB0XG4gIGNvbnN0IGV4Y2VycHQgPSBgRXJyb3Igd2hpbGUgcnVubmluZyBFU0xpbnQ6ICR7bWVzc2FnZS5zcGxpdCgnXFxuJylbMF19LmBcbiAgY29uc3QgZGVzY3JpcHRpb24gPSBgPGRpdiBzdHlsZT1cIndoaXRlLXNwYWNlOiBwcmUtd3JhcFwiPiR7bWVzc2FnZX1cXG48aHIgLz4ke3N0YWNrfTwvZGl2PmBcbiAgcmV0dXJuIGdlbmVyYXRlVXNlck1lc3NhZ2UodGV4dEVkaXRvciwgeyBzZXZlcml0eTogJ2Vycm9yJywgZXhjZXJwdCwgZGVzY3JpcHRpb24gfSlcbn1cblxuY29uc3QgZ2VuZXJhdGVJbnZhbGlkVHJhY2UgPSBhc3luYyAoe1xuICBtc2dMaW5lLCBtc2dDb2wsIG1zZ0VuZExpbmUsIG1zZ0VuZENvbCxcbiAgZXNsaW50RnVsbFJhbmdlLCBmaWxlUGF0aCwgdGV4dEVkaXRvciwgcnVsZUlkLCBtZXNzYWdlXG59KSA9PiB7XG4gIGxldCBlcnJNc2dSYW5nZSA9IGAke21zZ0xpbmUgKyAxfToke21zZ0NvbH1gXG4gIGlmIChlc2xpbnRGdWxsUmFuZ2UpIHtcbiAgICBlcnJNc2dSYW5nZSArPSBgIC0gJHttc2dFbmRMaW5lICsgMX06JHttc2dFbmRDb2wgKyAxfWBcbiAgfVxuICBjb25zdCByYW5nZVRleHQgPSBgUmVxdWVzdGVkICR7ZXNsaW50RnVsbFJhbmdlID8gJ3N0YXJ0IHBvaW50JyA6ICdyYW5nZSd9OiAke2Vyck1zZ1JhbmdlfWBcbiAgY29uc3QgaXNzdWVVUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tL0F0b21MaW50ZXIvbGludGVyLWVzbGludC9pc3N1ZXMvbmV3J1xuICBjb25zdCB0aXRsZVRleHQgPSBgSW52YWxpZCBwb3NpdGlvbiBnaXZlbiBieSAnJHtydWxlSWR9J2BcbiAgY29uc3QgdGl0bGUgPSBlbmNvZGVVUklDb21wb25lbnQodGl0bGVUZXh0KVxuICBjb25zdCBib2R5ID0gZW5jb2RlVVJJQ29tcG9uZW50KFtcbiAgICAnRVNMaW50IHJldHVybmVkIGEgcG9pbnQgdGhhdCBkaWQgbm90IGV4aXN0IGluIHRoZSBkb2N1bWVudCBiZWluZyBlZGl0ZWQuJyxcbiAgICBgUnVsZTogXFxgJHtydWxlSWR9XFxgYCxcbiAgICByYW5nZVRleHQsXG4gICAgJycsICcnLFxuICAgICc8IS0tIElmIGF0IGFsbCBwb3NzaWJsZSwgcGxlYXNlIGluY2x1ZGUgY29kZSB0byByZXByb2R1Y2UgdGhpcyBpc3N1ZSEgLS0+JyxcbiAgICAnJywgJycsXG4gICAgJ0RlYnVnIGluZm9ybWF0aW9uOicsXG4gICAgJ2BgYGpzb24nLFxuICAgIEpTT04uc3RyaW5naWZ5KGF3YWl0IGdldERlYnVnSW5mbygpLCBudWxsLCAyKSxcbiAgICAnYGBgJ1xuICBdLmpvaW4oJ1xcbicpKVxuXG4gIGNvbnN0IGxvY2F0aW9uID0ge1xuICAgIGZpbGU6IGZpbGVQYXRoLFxuICAgIHBvc2l0aW9uOiBnZW5lcmF0ZVJhbmdlKHRleHRFZGl0b3IsIDApLFxuICB9XG4gIGNvbnN0IG5ld0lzc3VlVVJMID0gYCR7aXNzdWVVUkx9P3RpdGxlPSR7dGl0bGV9JmJvZHk9JHtib2R5fWBcblxuICByZXR1cm4ge1xuICAgIHNldmVyaXR5OiAnZXJyb3InLFxuICAgIGV4Y2VycHQ6IGAke3RpdGxlVGV4dH0uIFNlZSB0aGUgZGVzY3JpcHRpb24gZm9yIGRldGFpbHMuIGAgK1xuICAgICAgJ0NsaWNrIHRoZSBVUkwgdG8gb3BlbiBhIG5ldyBpc3N1ZSEnLFxuICAgIHVybDogbmV3SXNzdWVVUkwsXG4gICAgbG9jYXRpb24sXG4gICAgZGVzY3JpcHRpb246IGAke3JhbmdlVGV4dH1cXG5PcmlnaW5hbCBtZXNzYWdlOiAke21lc3NhZ2V9YFxuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYSByYXcgcmVzcG9uc2UgZnJvbSBFU0xpbnQsIHRoaXMgcHJvY2Vzc2VzIHRoZSBtZXNzYWdlcyBpbnRvIGEgZm9ybWF0XG4gKiBjb21wYXRpYmxlIHdpdGggdGhlIExpbnRlciBBUEkuXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICBtZXNzYWdlcyAgIFRoZSBtZXNzYWdlcyBmcm9tIEVTTGludCdzIHJlc3BvbnNlXG4gKiBAcGFyYW0gIHtUZXh0RWRpdG9yfSB0ZXh0RWRpdG9yIFRoZSBBdG9tOjpUZXh0RWRpdG9yIG9mIHRoZSBmaWxlIHRoZSBtZXNzYWdlcyBiZWxvbmcgdG9cbiAqIEBwYXJhbSAge2Jvb2x9ICAgICAgIHNob3dSdWxlICAgV2hldGhlciB0byBzaG93IHRoZSBydWxlIGluIHRoZSBtZXNzYWdlc1xuICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgICAgICBUaGUgbWVzc2FnZXMgdHJhbnNmb3JtZWQgaW50byBMaW50ZXIgbWVzc2FnZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NFU0xpbnRNZXNzYWdlcyhtZXNzYWdlcywgdGV4dEVkaXRvciwgc2hvd1J1bGUpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKG1lc3NhZ2VzLm1hcChhc3luYyAoe1xuICAgIGZhdGFsLCBtZXNzYWdlOiBvcmlnaW5hbE1lc3NhZ2UsIGxpbmUsIHNldmVyaXR5LCBydWxlSWQsIGNvbHVtbiwgZml4LCBlbmRMaW5lLCBlbmRDb2x1bW5cbiAgfSkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBmYXRhbCA/IG9yaWdpbmFsTWVzc2FnZS5zcGxpdCgnXFxuJylbMF0gOiBvcmlnaW5hbE1lc3NhZ2VcbiAgICBjb25zdCBmaWxlUGF0aCA9IHRleHRFZGl0b3IuZ2V0UGF0aCgpXG4gICAgY29uc3QgdGV4dEJ1ZmZlciA9IHRleHRFZGl0b3IuZ2V0QnVmZmVyKClcbiAgICBsZXQgbGludGVyRml4ID0gbnVsbFxuICAgIGlmIChmaXgpIHtcbiAgICAgIGNvbnN0IGZpeFJhbmdlID0gbmV3IFJhbmdlKFxuICAgICAgICB0ZXh0QnVmZmVyLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgoZml4LnJhbmdlWzBdKSxcbiAgICAgICAgdGV4dEJ1ZmZlci5wb3NpdGlvbkZvckNoYXJhY3RlckluZGV4KGZpeC5yYW5nZVsxXSlcbiAgICAgIClcbiAgICAgIGxpbnRlckZpeCA9IHtcbiAgICAgICAgcG9zaXRpb246IGZpeFJhbmdlLFxuICAgICAgICByZXBsYWNlV2l0aDogZml4LnRleHRcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1zZ0NvbFxuICAgIGxldCBtc2dFbmRMaW5lXG4gICAgbGV0IG1zZ0VuZENvbFxuICAgIGxldCBlc2xpbnRGdWxsUmFuZ2UgPSBmYWxzZVxuXG4gICAgLypcbiAgICAgTm90ZTogRVNMaW50IHBvc2l0aW9ucyBhcmUgMS1pbmRleGVkLCB3aGlsZSBBdG9tIGV4cGVjdHMgMC1pbmRleGVkLFxuICAgICBwb3NpdGlvbnMuIFdlIGFyZSBzdWJ0cmFjdGluZyAxIGZyb20gdGhlc2UgdmFsdWVzIGhlcmUgc28gd2UgZG9uJ3QgaGF2ZSB0b1xuICAgICBrZWVwIGRvaW5nIHNvIGluIGxhdGVyIHVzZXMuXG4gICAgICovXG4gICAgY29uc3QgbXNnTGluZSA9IGxpbmUgLSAxXG4gICAgaWYgKHR5cGVvZiBlbmRDb2x1bW4gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBlbmRMaW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZXNsaW50RnVsbFJhbmdlID0gdHJ1ZVxuICAgICAgLy8gSGVyZSB3ZSBhbHdheXMgd2FudCB0aGUgY29sdW1uIHRvIGJlIGEgbnVtYmVyXG4gICAgICBtc2dDb2wgPSBNYXRoLm1heCgwLCBjb2x1bW4gLSAxKVxuICAgICAgbXNnRW5kTGluZSA9IGVuZExpbmUgLSAxXG4gICAgICBtc2dFbmRDb2wgPSBlbmRDb2x1bW4gLSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHdhbnQgbXNnQ29sIHRvIHJlbWFpbiB1bmRlZmluZWQgaWYgaXQgd2FzIGluaXRpYWxseSBzb1xuICAgICAgLy8gYGdlbmVyYXRlUmFuZ2VgIHdpbGwgZ2l2ZSB1cyBhIHJhbmdlIG92ZXIgdGhlIGVudGlyZSBsaW5lXG4gICAgICBtc2dDb2wgPSB0eXBlb2YgY29sdW1uICE9PSAndW5kZWZpbmVkJyA/IGNvbHVtbiAtIDEgOiBjb2x1bW5cbiAgICB9XG5cbiAgICBsZXQgcmV0ID0ge1xuICAgICAgc2V2ZXJpdHk6IHNldmVyaXR5ID09PSAxID8gJ3dhcm5pbmcnIDogJ2Vycm9yJyxcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGZpbGU6IGZpbGVQYXRoLFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChydWxlSWQpIHtcbiAgICAgIHJldC51cmwgPSBydWxlcy5nZXRSdWxlVXJsKHJ1bGVJZClcbiAgICB9XG5cbiAgICBsZXQgcmFuZ2VcbiAgICB0cnkge1xuICAgICAgaWYgKGVzbGludEZ1bGxSYW5nZSkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpXG4gICAgICAgIHRocm93SWZJbnZhbGlkUG9pbnQoYnVmZmVyLCBtc2dMaW5lLCBtc2dDb2wpXG4gICAgICAgIHRocm93SWZJbnZhbGlkUG9pbnQoYnVmZmVyLCBtc2dFbmRMaW5lLCBtc2dFbmRDb2wpXG4gICAgICAgIHJhbmdlID0gW1ttc2dMaW5lLCBtc2dDb2xdLCBbbXNnRW5kTGluZSwgbXNnRW5kQ29sXV1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gZ2VuZXJhdGVSYW5nZSh0ZXh0RWRpdG9yLCBtc2dMaW5lLCBtc2dDb2wpXG4gICAgICB9XG4gICAgICByZXQubG9jYXRpb24ucG9zaXRpb24gPSByYW5nZVxuXG4gICAgICBjb25zdCBydWxlQXBwZW5kaXggPSBzaG93UnVsZSA/IGAgKCR7cnVsZUlkIHx8ICdGYXRhbCd9KWAgOiAnJ1xuICAgICAgcmV0LmV4Y2VycHQgPSBgJHttZXNzYWdlfSR7cnVsZUFwcGVuZGl4fWBcblxuICAgICAgaWYgKGxpbnRlckZpeCkge1xuICAgICAgICByZXQuc29sdXRpb25zID0gW2xpbnRlckZpeF1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldCA9IGF3YWl0IGdlbmVyYXRlSW52YWxpZFRyYWNlKHtcbiAgICAgICAgbXNnTGluZSxcbiAgICAgICAgbXNnQ29sLFxuICAgICAgICBtc2dFbmRMaW5lLFxuICAgICAgICBtc2dFbmRDb2wsXG4gICAgICAgIGVzbGludEZ1bGxSYW5nZSxcbiAgICAgICAgZmlsZVBhdGgsXG4gICAgICAgIHRleHRFZGl0b3IsXG4gICAgICAgIHJ1bGVJZCxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFxuICB9KSlcbn1cblxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGxpbnQgam9iXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICByZXNwb25zZSAgIFRoZSByYXcgcmVzcG9uc2UgZnJvbSB0aGUgam9iXG4gKiBAcGFyYW0gIHtUZXh0RWRpdG9yfSB0ZXh0RWRpdG9yIFRoZSBBdG9tOjpUZXh0RWRpdG9yIG9mIHRoZSBmaWxlIHRoZSBtZXNzYWdlcyBiZWxvbmcgdG9cbiAqIEBwYXJhbSAge2Jvb2x9ICAgICAgIHNob3dSdWxlICAgV2hldGhlciB0byBzaG93IHRoZSBydWxlIGluIHRoZSBtZXNzYWdlc1xuICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgICAgICBUaGUgbWVzc2FnZXMgdHJhbnNmb3JtZWQgaW50byBMaW50ZXIgbWVzc2FnZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NKb2JSZXNwb25zZShyZXNwb25zZSwgdGV4dEVkaXRvciwgc2hvd1J1bGUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXNwb25zZSwgJ3VwZGF0ZWRSdWxlcycpKSB7XG4gICAgcnVsZXMucmVwbGFjZVJ1bGVzKHJlc3BvbnNlLnVwZGF0ZWRSdWxlcylcbiAgfVxuICByZXR1cm4gcHJvY2Vzc0VTTGludE1lc3NhZ2VzKHJlc3BvbnNlLm1lc3NhZ2VzLCB0ZXh0RWRpdG9yLCBzaG93UnVsZSlcbn1cbiJdfQ==