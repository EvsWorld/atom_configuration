Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getBufferPositionFromMouseEvent = getBufferPositionFromMouseEvent;
exports.mouseEventNearPosition = mouseEventNearPosition;
exports.hasParent = hasParent;

var TOOLTIP_WIDTH_HIDE_OFFSET = 30;

function getBufferPositionFromMouseEvent(event, editor, editorElement) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var screenPosition = editorElement.component.screenPositionForPixelPosition(pixelPosition);
  if (Number.isNaN(screenPosition.row) || Number.isNaN(screenPosition.column)) return null;
  // ^ Workaround for NaN bug steelbrain/linter-ui-default#191
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  // Only allow offset of 20px - Fixes steelbrain/linter-ui-default#63
  if ((differenceTop === 0 || differenceTop > 0 && differenceTop < 20 || differenceTop < 0 && differenceTop > -20) && (differenceLeft === 0 || differenceLeft > 0 && differenceLeft < 20 || differenceLeft < 0 && differenceLeft > -20)) {
    return editor.bufferPositionForScreenPosition(screenPosition);
  }
  return null;
}

function mouseEventNearPosition(_ref) {
  var event = _ref.event;
  var editor = _ref.editor;
  var editorElement = _ref.editorElement;
  var tooltipElement = _ref.tooltipElement;
  var screenPosition = _ref.screenPosition;

  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;

  var editorLineHeight = editor.lineHeightInPixels;
  var elementHeight = tooltipElement.offsetHeight + editorLineHeight;
  var elementWidth = tooltipElement.offsetWidth;

  if (differenceTop > 0) {
    // Cursor is below the line
    if (differenceTop > elementHeight + 1.5 * editorLineHeight) {
      return false;
    }
  } else if (differenceTop < 0) {
    // Cursor is above the line
    if (differenceTop < -1.5 * editorLineHeight) {
      return false;
    }
  }
  if (differenceLeft > 0) {
    // Right of the start of highlight
    if (differenceLeft > elementWidth + TOOLTIP_WIDTH_HIDE_OFFSET) {
      return false;
    }
  } else if (differenceLeft < 0) {
    // Left of start of highlight
    if (differenceLeft < -1 * TOOLTIP_WIDTH_HIDE_OFFSET) {
      return false;
    }
  }
  return true;
}

function hasParent(givenElement, selector) {
  var element = givenElement;
  do {
    if (element.matches(selector)) {
      return true;
    }
    element = element.parentElement;
  } while (element && element.nodeName !== 'HTML');
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldmFuaGVuZHJpeDEvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL2VkaXRvci9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQSxJQUFNLHlCQUF5QixHQUFHLEVBQUUsQ0FBQTs7QUFFN0IsU0FBUywrQkFBK0IsQ0FBQyxLQUFpQixFQUFFLE1BQWtCLEVBQUUsYUFBcUIsRUFBVTtBQUNwSCxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQy9FLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDNUYsTUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQTs7QUFFeEYsTUFBTSxxQkFBcUIsR0FBRyxhQUFhLENBQUMsOEJBQThCLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDMUYsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUE7QUFDbkUsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUE7O0FBRXRFLE1BQ0UsQ0FBQyxhQUFhLEtBQUssQ0FBQyxJQUFLLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFHLEVBQUUsQUFBQyxJQUFLLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQzlHLGNBQWMsS0FBSyxDQUFDLElBQUssY0FBYyxHQUFHLENBQUMsSUFBSSxjQUFjLEdBQUcsRUFBRSxBQUFDLElBQUssY0FBYyxHQUFHLENBQUMsSUFBSSxjQUFjLEdBQUcsQ0FBQyxFQUFFLENBQUMsQUFBQyxFQUNySDtBQUNBLFdBQU8sTUFBTSxDQUFDLCtCQUErQixDQUFDLGNBQWMsQ0FBQyxDQUFBO0dBQzlEO0FBQ0QsU0FBTyxJQUFJLENBQUE7Q0FDWjs7QUFFTSxTQUFTLHNCQUFzQixDQUFDLElBQXdFLEVBQVc7TUFBakYsS0FBSyxHQUFQLElBQXdFLENBQXRFLEtBQUs7TUFBRSxNQUFNLEdBQWYsSUFBd0UsQ0FBL0QsTUFBTTtNQUFFLGFBQWEsR0FBOUIsSUFBd0UsQ0FBdkQsYUFBYTtNQUFFLGNBQWMsR0FBOUMsSUFBd0UsQ0FBeEMsY0FBYztNQUFFLGNBQWMsR0FBOUQsSUFBd0UsQ0FBeEIsY0FBYzs7QUFDbkcsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMvRSxNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUMxRixNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQTtBQUNuRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQTs7QUFFdEUsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUE7QUFDbEQsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQTtBQUNwRSxNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFBOztBQUUvQyxNQUFJLGFBQWEsR0FBRyxDQUFDLEVBQUU7O0FBRXJCLFFBQUksYUFBYSxHQUFHLGFBQWEsR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEVBQUU7QUFDMUQsYUFBTyxLQUFLLENBQUE7S0FDYjtHQUNGLE1BQU0sSUFBSSxhQUFhLEdBQUcsQ0FBQyxFQUFFOztBQUU1QixRQUFJLGFBQWEsR0FBRyxDQUFDLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRTtBQUMzQyxhQUFPLEtBQUssQ0FBQTtLQUNiO0dBQ0Y7QUFDRCxNQUFJLGNBQWMsR0FBRyxDQUFDLEVBQUU7O0FBRXRCLFFBQUksY0FBYyxHQUFHLFlBQVksR0FBRyx5QkFBeUIsRUFBRTtBQUM3RCxhQUFPLEtBQUssQ0FBQTtLQUNiO0dBQ0YsTUFBTSxJQUFJLGNBQWMsR0FBRyxDQUFDLEVBQUU7O0FBRTdCLFFBQUksY0FBYyxHQUFHLENBQUMsQ0FBQyxHQUFHLHlCQUF5QixFQUFFO0FBQ25ELGFBQU8sS0FBSyxDQUFBO0tBQ2I7R0FDRjtBQUNELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O0FBRU0sU0FBUyxTQUFTLENBQUMsWUFBeUIsRUFBRSxRQUFnQixFQUFXO0FBQzlFLE1BQUksT0FBTyxHQUFHLFlBQVksQ0FBQTtBQUMxQixLQUFHO0FBQ0QsUUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzdCLGFBQU8sSUFBSSxDQUFBO0tBQ1o7QUFDRCxXQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQTtHQUNoQyxRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBQztBQUNoRCxTQUFPLEtBQUssQ0FBQTtDQUNiIiwiZmlsZSI6Ii9Vc2Vycy9ldmFuaGVuZHJpeDEvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL2VkaXRvci9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHR5cGUgeyBQb2ludCwgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5cbmNvbnN0IFRPT0xUSVBfV0lEVEhfSElERV9PRkZTRVQgPSAzMFxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVmZmVyUG9zaXRpb25Gcm9tTW91c2VFdmVudChldmVudDogTW91c2VFdmVudCwgZWRpdG9yOiBUZXh0RWRpdG9yLCBlZGl0b3JFbGVtZW50OiBPYmplY3QpOiA/UG9pbnQge1xuICBjb25zdCBwaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5jb21wb25lbnQucGl4ZWxQb3NpdGlvbkZvck1vdXNlRXZlbnQoZXZlbnQpXG4gIGNvbnN0IHNjcmVlblBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5jb21wb25lbnQuc2NyZWVuUG9zaXRpb25Gb3JQaXhlbFBvc2l0aW9uKHBpeGVsUG9zaXRpb24pXG4gIGlmIChOdW1iZXIuaXNOYU4oc2NyZWVuUG9zaXRpb24ucm93KSB8fCBOdW1iZXIuaXNOYU4oc2NyZWVuUG9zaXRpb24uY29sdW1uKSkgcmV0dXJuIG51bGxcbiAgLy8gXiBXb3JrYXJvdW5kIGZvciBOYU4gYnVnIHN0ZWVsYnJhaW4vbGludGVyLXVpLWRlZmF1bHQjMTkxXG4gIGNvbnN0IGV4cGVjdGVkUGl4ZWxQb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQucGl4ZWxQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNjcmVlblBvc2l0aW9uKVxuICBjb25zdCBkaWZmZXJlbmNlVG9wID0gcGl4ZWxQb3NpdGlvbi50b3AgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24udG9wXG4gIGNvbnN0IGRpZmZlcmVuY2VMZWZ0ID0gcGl4ZWxQb3NpdGlvbi5sZWZ0IC0gZXhwZWN0ZWRQaXhlbFBvc2l0aW9uLmxlZnRcbiAgLy8gT25seSBhbGxvdyBvZmZzZXQgb2YgMjBweCAtIEZpeGVzIHN0ZWVsYnJhaW4vbGludGVyLXVpLWRlZmF1bHQjNjNcbiAgaWYgKFxuICAgIChkaWZmZXJlbmNlVG9wID09PSAwIHx8IChkaWZmZXJlbmNlVG9wID4gMCAmJiBkaWZmZXJlbmNlVG9wIDwgMjApIHx8IChkaWZmZXJlbmNlVG9wIDwgMCAmJiBkaWZmZXJlbmNlVG9wID4gLTIwKSkgJiZcbiAgICAoZGlmZmVyZW5jZUxlZnQgPT09IDAgfHwgKGRpZmZlcmVuY2VMZWZ0ID4gMCAmJiBkaWZmZXJlbmNlTGVmdCA8IDIwKSB8fCAoZGlmZmVyZW5jZUxlZnQgPCAwICYmIGRpZmZlcmVuY2VMZWZ0ID4gLTIwKSlcbiAgKSB7XG4gICAgcmV0dXJuIGVkaXRvci5idWZmZXJQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNjcmVlblBvc2l0aW9uKVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3VzZUV2ZW50TmVhclBvc2l0aW9uKHsgZXZlbnQsIGVkaXRvciwgZWRpdG9yRWxlbWVudCwgdG9vbHRpcEVsZW1lbnQsIHNjcmVlblBvc2l0aW9uIH06IE9iamVjdCk6IGJvb2xlYW4ge1xuICBjb25zdCBwaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5jb21wb25lbnQucGl4ZWxQb3NpdGlvbkZvck1vdXNlRXZlbnQoZXZlbnQpXG4gIGNvbnN0IGV4cGVjdGVkUGl4ZWxQb3NpdGlvbiA9IGVkaXRvckVsZW1lbnQucGl4ZWxQb3NpdGlvbkZvclNjcmVlblBvc2l0aW9uKHNjcmVlblBvc2l0aW9uKVxuICBjb25zdCBkaWZmZXJlbmNlVG9wID0gcGl4ZWxQb3NpdGlvbi50b3AgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24udG9wXG4gIGNvbnN0IGRpZmZlcmVuY2VMZWZ0ID0gcGl4ZWxQb3NpdGlvbi5sZWZ0IC0gZXhwZWN0ZWRQaXhlbFBvc2l0aW9uLmxlZnRcblxuICBjb25zdCBlZGl0b3JMaW5lSGVpZ2h0ID0gZWRpdG9yLmxpbmVIZWlnaHRJblBpeGVsc1xuICBjb25zdCBlbGVtZW50SGVpZ2h0ID0gdG9vbHRpcEVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgZWRpdG9yTGluZUhlaWdodFxuICBjb25zdCBlbGVtZW50V2lkdGggPSB0b29sdGlwRWxlbWVudC5vZmZzZXRXaWR0aFxuXG4gIGlmIChkaWZmZXJlbmNlVG9wID4gMCkge1xuICAgIC8vIEN1cnNvciBpcyBiZWxvdyB0aGUgbGluZVxuICAgIGlmIChkaWZmZXJlbmNlVG9wID4gZWxlbWVudEhlaWdodCArIDEuNSAqIGVkaXRvckxpbmVIZWlnaHQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmZXJlbmNlVG9wIDwgMCkge1xuICAgIC8vIEN1cnNvciBpcyBhYm92ZSB0aGUgbGluZVxuICAgIGlmIChkaWZmZXJlbmNlVG9wIDwgLTEuNSAqIGVkaXRvckxpbmVIZWlnaHQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICBpZiAoZGlmZmVyZW5jZUxlZnQgPiAwKSB7XG4gICAgLy8gUmlnaHQgb2YgdGhlIHN0YXJ0IG9mIGhpZ2hsaWdodFxuICAgIGlmIChkaWZmZXJlbmNlTGVmdCA+IGVsZW1lbnRXaWR0aCArIFRPT0xUSVBfV0lEVEhfSElERV9PRkZTRVQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmZXJlbmNlTGVmdCA8IDApIHtcbiAgICAvLyBMZWZ0IG9mIHN0YXJ0IG9mIGhpZ2hsaWdodFxuICAgIGlmIChkaWZmZXJlbmNlTGVmdCA8IC0xICogVE9PTFRJUF9XSURUSF9ISURFX09GRlNFVCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQYXJlbnQoZ2l2ZW5FbGVtZW50OiBIVE1MRWxlbWVudCwgc2VsZWN0b3I6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBsZXQgZWxlbWVudCA9IGdpdmVuRWxlbWVudFxuICBkbyB7XG4gICAgaWYgKGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgfSB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVOYW1lICE9PSAnSFRNTCcpXG4gIHJldHVybiBmYWxzZVxufVxuIl19