Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getChunks = getChunks;
exports.getChunksByProjects = getChunksByProjects;
exports.mergeChange = mergeChange;
exports.calculateDecorations = calculateDecorations;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../helpers');

function getChunks(filePath, projectPath) {
  var toReturn = [];
  var chunks = filePath.split(_path2['default'].sep);
  while (chunks.length) {
    var currentPath = chunks.join(_path2['default'].sep);
    if (currentPath) {
      // This is required for when you open files outside of project window
      // and the last entry is '' because unix paths start with /
      toReturn.push(currentPath);
      if (currentPath === projectPath) {
        break;
      }
    }
    chunks.pop();
  }
  return toReturn;
}

function getChunksByProjects(filePath, projectPaths) {
  var matchingProjectPath = projectPaths.find(function (p) {
    return filePath.startsWith(p);
  });
  if (!matchingProjectPath) {
    return [filePath];
  }
  return getChunks(filePath, matchingProjectPath);
}

function mergeChange(change, filePath, severity) {
  if (!change[filePath]) {
    change[filePath] = {
      info: false,
      error: false,
      warning: false
    };
  }
  change[filePath][severity] = true;
}

function calculateDecorations(decorateOnTreeView, messages) {
  var toReturn = {};
  var projectPaths = atom.project.getPaths();
  messages.forEach(function (message) {
    var filePath = (0, _helpers.$file)(message);
    if (filePath) {
      var chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths);
      chunks.forEach(function (chunk) {
        return mergeChange(toReturn, chunk, message.severity);
      });
    }
  });
  return toReturn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldmFuaGVuZHJpeDEvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL3RyZWUtdmlldy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7dUJBQ0QsWUFBWTs7QUFHM0IsU0FBUyxTQUFTLENBQUMsUUFBZ0IsRUFBRSxXQUFtQixFQUFpQjtBQUM5RSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7QUFDbkIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxrQkFBSyxHQUFHLENBQUMsQ0FBQTtBQUN2QyxTQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDcEIsUUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBSyxHQUFHLENBQUMsQ0FBQTtBQUN6QyxRQUFJLFdBQVcsRUFBRTs7O0FBR2YsY0FBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUMxQixVQUFJLFdBQVcsS0FBSyxXQUFXLEVBQUU7QUFDL0IsY0FBSztPQUNOO0tBQ0Y7QUFDRCxVQUFNLENBQUMsR0FBRyxFQUFFLENBQUE7R0FDYjtBQUNELFNBQU8sUUFBUSxDQUFBO0NBQ2hCOztBQUVNLFNBQVMsbUJBQW1CLENBQUMsUUFBZ0IsRUFBRSxZQUEyQixFQUFpQjtBQUNoRyxNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDO1dBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FBQSxDQUFDLENBQUE7QUFDMUUsTUFBSSxDQUFDLG1CQUFtQixFQUFFO0FBQ3hCLFdBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtHQUNsQjtBQUNELFNBQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0NBQ2hEOztBQUVNLFNBQVMsV0FBVyxDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLFFBQWdCLEVBQVE7QUFDcEYsTUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNyQixVQUFNLENBQUMsUUFBUSxDQUFDLEdBQUc7QUFDakIsVUFBSSxFQUFFLEtBQUs7QUFDWCxXQUFLLEVBQUUsS0FBSztBQUNaLGFBQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQTtHQUNGO0FBQ0QsUUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQTtDQUNsQzs7QUFFTSxTQUFTLG9CQUFvQixDQUFDLGtCQUFxRCxFQUFFLFFBQThCLEVBQVU7QUFDbEksTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQ25CLE1BQU0sWUFBMkIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO0FBQzNELFVBQVEsQ0FBQyxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUU7QUFDakMsUUFBTSxRQUFRLEdBQUcsb0JBQU0sT0FBTyxDQUFDLENBQUE7QUFDL0IsUUFBSSxRQUFRLEVBQUU7QUFDWixVQUFNLE1BQU0sR0FBRyxrQkFBa0IsS0FBSyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUE7QUFDeEcsWUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7ZUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO09BQUEsQ0FBQyxDQUFBO0tBQ3hFO0dBQ0YsQ0FBQyxDQUFBO0FBQ0YsU0FBTyxRQUFRLENBQUE7Q0FDaEIiLCJmaWxlIjoiL1VzZXJzL2V2YW5oZW5kcml4MS8uYXRvbS9wYWNrYWdlcy9saW50ZXItdWktZGVmYXVsdC9saWIvdHJlZS12aWV3L2hlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgJGZpbGUgfSBmcm9tICcuLi9oZWxwZXJzJ1xuaW1wb3J0IHR5cGUgeyBMaW50ZXJNZXNzYWdlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaHVua3MoZmlsZVBhdGg6IHN0cmluZywgcHJvamVjdFBhdGg6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICBjb25zdCB0b1JldHVybiA9IFtdXG4gIGNvbnN0IGNodW5rcyA9IGZpbGVQYXRoLnNwbGl0KFBhdGguc2VwKVxuICB3aGlsZSAoY2h1bmtzLmxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gY2h1bmtzLmpvaW4oUGF0aC5zZXApXG4gICAgaWYgKGN1cnJlbnRQYXRoKSB7XG4gICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIGZvciB3aGVuIHlvdSBvcGVuIGZpbGVzIG91dHNpZGUgb2YgcHJvamVjdCB3aW5kb3dcbiAgICAgIC8vIGFuZCB0aGUgbGFzdCBlbnRyeSBpcyAnJyBiZWNhdXNlIHVuaXggcGF0aHMgc3RhcnQgd2l0aCAvXG4gICAgICB0b1JldHVybi5wdXNoKGN1cnJlbnRQYXRoKVxuICAgICAgaWYgKGN1cnJlbnRQYXRoID09PSBwcm9qZWN0UGF0aCkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBjaHVua3MucG9wKClcbiAgfVxuICByZXR1cm4gdG9SZXR1cm5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENodW5rc0J5UHJvamVjdHMoZmlsZVBhdGg6IHN0cmluZywgcHJvamVjdFBhdGhzOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8c3RyaW5nPiB7XG4gIGNvbnN0IG1hdGNoaW5nUHJvamVjdFBhdGggPSBwcm9qZWN0UGF0aHMuZmluZChwID0+IGZpbGVQYXRoLnN0YXJ0c1dpdGgocCkpXG4gIGlmICghbWF0Y2hpbmdQcm9qZWN0UGF0aCkge1xuICAgIHJldHVybiBbZmlsZVBhdGhdXG4gIH1cbiAgcmV0dXJuIGdldENodW5rcyhmaWxlUGF0aCwgbWF0Y2hpbmdQcm9qZWN0UGF0aClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hhbmdlKGNoYW5nZTogT2JqZWN0LCBmaWxlUGF0aDogc3RyaW5nLCBzZXZlcml0eTogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghY2hhbmdlW2ZpbGVQYXRoXSkge1xuICAgIGNoYW5nZVtmaWxlUGF0aF0gPSB7XG4gICAgICBpbmZvOiBmYWxzZSxcbiAgICAgIGVycm9yOiBmYWxzZSxcbiAgICAgIHdhcm5pbmc6IGZhbHNlLFxuICAgIH1cbiAgfVxuICBjaGFuZ2VbZmlsZVBhdGhdW3NldmVyaXR5XSA9IHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZURlY29yYXRpb25zKGRlY29yYXRlT25UcmVlVmlldzogJ0ZpbGVzIGFuZCBEaXJlY3RvcmllcycgfCAnRmlsZXMnLCBtZXNzYWdlczogQXJyYXk8TGludGVyTWVzc2FnZT4pOiBPYmplY3Qge1xuICBjb25zdCB0b1JldHVybiA9IHt9XG4gIGNvbnN0IHByb2plY3RQYXRoczogQXJyYXk8c3RyaW5nPiA9IGF0b20ucHJvamVjdC5nZXRQYXRocygpXG4gIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gJGZpbGUobWVzc2FnZSlcbiAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgIGNvbnN0IGNodW5rcyA9IGRlY29yYXRlT25UcmVlVmlldyA9PT0gJ0ZpbGVzJyA/IFtmaWxlUGF0aF0gOiBnZXRDaHVua3NCeVByb2plY3RzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHMpXG4gICAgICBjaHVua3MuZm9yRWFjaChjaHVuayA9PiBtZXJnZUNoYW5nZSh0b1JldHVybiwgY2h1bmssIG1lc3NhZ2Uuc2V2ZXJpdHkpKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHRvUmV0dXJuXG59XG4iXX0=