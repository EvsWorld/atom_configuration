Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getChunks = getChunks;
exports.getChunksByProjects = getChunksByProjects;
exports.mergeChange = mergeChange;
exports.calculateDecorations = calculateDecorations;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../helpers');

function getChunks(filePath, projectPath) {
  var toReturn = [];
  var chunks = filePath.split(_path2['default'].sep);
  while (chunks.length) {
    var currentPath = chunks.join(_path2['default'].sep);
    if (currentPath) {
      // This is required for when you open files outside of project window
      // and the last entry is '' because unix paths start with /
      toReturn.push(currentPath);
      if (currentPath === projectPath) {
        break;
      }
    }
    chunks.pop();
  }
  return toReturn;
}

function getChunksByProjects(filePath, projectPaths) {
  var matchingProjectPath = projectPaths.find(function (p) {
    return filePath.startsWith(p);
  });
  if (!matchingProjectPath) {
    return [filePath];
  }
  return getChunks(filePath, matchingProjectPath);
}

function mergeChange(change, filePath, severity) {
  if (!change[filePath]) {
    change[filePath] = {
      info: false,
      error: false,
      warning: false
    };
  }
  change[filePath][severity] = true;
}

function calculateDecorations(decorateOnTreeView, messages) {
  var toReturn = {};
  var projectPaths = atom.project.getPaths();
  messages.forEach(function (message) {
    var filePath = (0, _helpers.$file)(message);
    if (filePath) {
      var chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths);
      chunks.forEach(function (chunk) {
        return mergeChange(toReturn, chunk, message.severity);
      });
    }
  });
  return toReturn;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldmFuaGVuZHJpeDEvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL3RyZWUtdmlldy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7dUJBQ0QsWUFBWTs7QUFHM0IsU0FBUyxTQUFTLENBQUMsUUFBZ0IsRUFBRSxXQUFtQixFQUFpQjtBQUM5RSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7QUFDbkIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxrQkFBSyxHQUFHLENBQUMsQ0FBQTtBQUN2QyxTQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDcEIsUUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBSyxHQUFHLENBQUMsQ0FBQTtBQUN6QyxRQUFJLFdBQVcsRUFBRTs7O0FBR2YsY0FBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUMxQixVQUFJLFdBQVcsS0FBSyxXQUFXLEVBQUU7QUFDL0IsY0FBSztPQUNOO0tBQ0Y7QUFDRCxVQUFNLENBQUMsR0FBRyxFQUFFLENBQUE7R0FDYjtBQUNELFNBQU8sUUFBUSxDQUFBO0NBQ2hCOztBQUVNLFNBQVMsbUJBQW1CLENBQUMsUUFBZ0IsRUFBRSxZQUEyQixFQUFpQjtBQUNoRyxNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDO1dBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FBQSxDQUFDLENBQUE7QUFDMUUsTUFBSSxDQUFDLG1CQUFtQixFQUFFO0FBQ3hCLFdBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtHQUNsQjtBQUNELFNBQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0NBQ2hEOztBQUVNLFNBQVMsV0FBVyxDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLFFBQWdCLEVBQVE7QUFDcEYsTUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNyQixVQUFNLENBQUMsUUFBUSxDQUFDLEdBQUc7QUFDakIsVUFBSSxFQUFFLEtBQUs7QUFDWCxXQUFLLEVBQUUsS0FBSztBQUNaLGFBQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQTtHQUNGO0FBQ0QsUUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQTtDQUNsQzs7QUFFTSxTQUFTLG9CQUFvQixDQUNsQyxrQkFBcUQsRUFDckQsUUFBOEIsRUFDdEI7QUFDUixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7QUFDbkIsTUFBTSxZQUEyQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDM0QsVUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBRTtBQUNqQyxRQUFNLFFBQVEsR0FBRyxvQkFBTSxPQUFPLENBQUMsQ0FBQTtBQUMvQixRQUFJLFFBQVEsRUFBRTtBQUNaLFVBQU0sTUFBTSxHQUFHLGtCQUFrQixLQUFLLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQTtBQUN4RyxZQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztlQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7T0FBQSxDQUFDLENBQUE7S0FDeEU7R0FDRixDQUFDLENBQUE7QUFDRixTQUFPLFFBQVEsQ0FBQTtDQUNoQiIsImZpbGUiOiIvVXNlcnMvZXZhbmhlbmRyaXgxLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi90cmVlLXZpZXcvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyAkZmlsZSB9IGZyb20gJy4uL2hlbHBlcnMnXG5pbXBvcnQgdHlwZSB7IExpbnRlck1lc3NhZ2UgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENodW5rcyhmaWxlUGF0aDogc3RyaW5nLCBwcm9qZWN0UGF0aDogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiB7XG4gIGNvbnN0IHRvUmV0dXJuID0gW11cbiAgY29uc3QgY2h1bmtzID0gZmlsZVBhdGguc3BsaXQoUGF0aC5zZXApXG4gIHdoaWxlIChjaHVua3MubGVuZ3RoKSB7XG4gICAgY29uc3QgY3VycmVudFBhdGggPSBjaHVua3Muam9pbihQYXRoLnNlcClcbiAgICBpZiAoY3VycmVudFBhdGgpIHtcbiAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgZm9yIHdoZW4geW91IG9wZW4gZmlsZXMgb3V0c2lkZSBvZiBwcm9qZWN0IHdpbmRvd1xuICAgICAgLy8gYW5kIHRoZSBsYXN0IGVudHJ5IGlzICcnIGJlY2F1c2UgdW5peCBwYXRocyBzdGFydCB3aXRoIC9cbiAgICAgIHRvUmV0dXJuLnB1c2goY3VycmVudFBhdGgpXG4gICAgICBpZiAoY3VycmVudFBhdGggPT09IHByb2plY3RQYXRoKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGNodW5rcy5wb3AoKVxuICB9XG4gIHJldHVybiB0b1JldHVyblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2h1bmtzQnlQcm9qZWN0cyhmaWxlUGF0aDogc3RyaW5nLCBwcm9qZWN0UGF0aHM6IEFycmF5PHN0cmluZz4pOiBBcnJheTxzdHJpbmc+IHtcbiAgY29uc3QgbWF0Y2hpbmdQcm9qZWN0UGF0aCA9IHByb2plY3RQYXRocy5maW5kKHAgPT4gZmlsZVBhdGguc3RhcnRzV2l0aChwKSlcbiAgaWYgKCFtYXRjaGluZ1Byb2plY3RQYXRoKSB7XG4gICAgcmV0dXJuIFtmaWxlUGF0aF1cbiAgfVxuICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBtYXRjaGluZ1Byb2plY3RQYXRoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGFuZ2UoY2hhbmdlOiBPYmplY3QsIGZpbGVQYXRoOiBzdHJpbmcsIHNldmVyaXR5OiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFjaGFuZ2VbZmlsZVBhdGhdKSB7XG4gICAgY2hhbmdlW2ZpbGVQYXRoXSA9IHtcbiAgICAgIGluZm86IGZhbHNlLFxuICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgd2FybmluZzogZmFsc2UsXG4gICAgfVxuICB9XG4gIGNoYW5nZVtmaWxlUGF0aF1bc2V2ZXJpdHldID0gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlRGVjb3JhdGlvbnMoXG4gIGRlY29yYXRlT25UcmVlVmlldzogJ0ZpbGVzIGFuZCBEaXJlY3RvcmllcycgfCAnRmlsZXMnLFxuICBtZXNzYWdlczogQXJyYXk8TGludGVyTWVzc2FnZT4sXG4pOiBPYmplY3Qge1xuICBjb25zdCB0b1JldHVybiA9IHt9XG4gIGNvbnN0IHByb2plY3RQYXRoczogQXJyYXk8c3RyaW5nPiA9IGF0b20ucHJvamVjdC5nZXRQYXRocygpXG4gIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gJGZpbGUobWVzc2FnZSlcbiAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgIGNvbnN0IGNodW5rcyA9IGRlY29yYXRlT25UcmVlVmlldyA9PT0gJ0ZpbGVzJyA/IFtmaWxlUGF0aF0gOiBnZXRDaHVua3NCeVByb2plY3RzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHMpXG4gICAgICBjaHVua3MuZm9yRWFjaChjaHVuayA9PiBtZXJnZUNoYW5nZSh0b1JldHVybiwgY2h1bmssIG1lc3NhZ2Uuc2V2ZXJpdHkpKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHRvUmV0dXJuXG59XG4iXX0=