{"name":"atom-select-list","version":"0.7.0","description":"A general-purpose select list for use in Atom packages","main":"./src/select-list-view.js","scripts":{"test":"atom --test test"},"author":"","license":"MIT","atomTestRunner":"atom-mocha-test-runner","devDependencies":{"atom-mocha-test-runner":"^0.3.0","sinon":"^2.1.0"},"dependencies":{"etch":"^0.12.6","fuzzaldrin":"^2.1.0"},"repository":{"type":"git","url":"git+https://github.com/atom/atom-select-list.git"},"readme":"# atom-select-list\n\nThis module is an [etch component](https://github.com/atom/etch) that can be used in Atom packages to show a select list with fuzzy filtering, keyboard/mouse navigation and other cool features.\n\n## Installation\n\n```bash\nnpm install --save atom-select-list\n```\n\n## Usage\n\nAfter installing the module, you can simply require it and use it as a standalone component:\n\n```js\nconst SelectList = require('atom-select-list')\n\nconst usersSelectList = new SelectList({\n  items: ['Alice', 'Bob', 'Carol']\n})\ndocument.body.appendChild(usersSelectList.element)\n```\n\nOr within another etch component:\n\n```jsx\nrender () {\n  return (\n    <SelectList items={this.items} />\n  )\n}\n```\n\n## API\n\nWhen creating a new instance of a select list, or when calling `update` on an existing one, you can supply a JavaScript object that can contain any of the following properties:\n\n* `items: [Object]`: an array containing the objects you want to show in the select list.\n* `elementForItem: (item: Object, options: Object) -> HTMLElement`: a function that is called whenever an item needs to be displayed.\n  * `options: Object`:\n    * `selected: Boolean`: indicating whether item is selected or not.\n    * `index: Number`: item's index.\n    * `visible: Boolean`: indicating whether item is visible in viewport or not. Unless `initiallyVisibleItemCount` was given, this value is always `true`.\n* (Optional) `maxResults: Number`: the number of maximum items that are shown.\n* (Optional) `filter: (items: [Object], query: String) -> [Object]`: a function that allows to decide which items to show whenever the query changes. By default, it uses [fuzzaldrin](https://github.com/atom/fuzzaldrin) to filter results.\n* (Optional) `filterKeyForItem: (item: Object) -> String`: when `filter` is not provided, this function will be called to retrieve a string property on each item and that will be used to filter them.\n* (Optional) `filterQuery: (query: String) -> String`: a function that allows to apply a transformation to the user query and whose return value will be used to filter items.\n* (Optional) `query: String`: a string that will replace the contents of the query editor.\n* (Optional) `selectQuery: Boolean`: a boolean indicating whether the query text should be selected or not.\n* (Optional) `order: (item1: Object, item2: Object) -> Number`: a function that allows to change the order in which items are shown.\n* (Optional) `emptyMessage: String`: a string shown when the list is empty.\n* (Optional) `errorMessage: String`: a string that needs to be set when you want to notify the user that an error occurred.\n* (Optional) `infoMessage: String`: a string that needs to be set when you want to provide some information to the user.\n* (Optional) `loadingMessage: String`: a string that needs to be set when you are loading items in the background.\n* (Optional) `loadingBadge: String/Number`: a string or number that needs to be set when the progress status changes (e.g. a percentage showing how many items have been loaded so far).\n* (Optional) `itemsClassList: [String]`: an array of strings that will be added as class names to the items element.\n* (Optional) `initialSelectionIndex: Number`: the index of the item to initially select and automatically select after query changes; defaults to 0.\n* (Optional) `didChangeQuery: (query: String) -> Void`: a function that is called when the query changes.\n* (Optional) `didChangeSelection: (item: Object) -> Void`: a function that is called when the selected item changes.\n* (Optional) `didConfirmSelection: (item: Object) -> Void`: a function that is called when the user clicks or presses enter on an item.\n* (Optional) `didConfirmEmptySelection: () -> Void`: a function that is called when the user presses <kbd>Enter</kbd> but the list is empty.\n* (Optional) `didCancelSelection: () -> Void`: a function that is called when the user presses <kbd>Esc</kbd> or the list loses focus.\n* (Optional) `initiallyVisibleItemCount: Number`: When this options was provided, `SelectList` observe visibility of items in viewport, visibility state is passed as `visible` option to `elementForItem`. This is mainly used to skip heavy computation for invisible items.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/atom/atom-select-list/issues"},"homepage":"https://github.com/atom/atom-select-list#readme","_id":"atom-select-list@0.7.0","_shasum":"8b7a7781f4f6a9b3ba89772d1b481096241efbb1","_resolved":"https://registry.npmjs.org/atom-select-list/-/atom-select-list-0.7.0.tgz","_from":"atom-select-list@>=0.7.0 <0.8.0"}